// Generated by CoffeeScript 1.9.0
var OAuthModule, oauth2orize, passport;

passport = require('passport');

oauth2orize = require('oauth2orize');

OAuthModule = (function() {
  function OAuthModule() {}

  OAuthModule.prototype.serialize = function(client, done) {
    return done(null, client.id);
  };

  OAuthModule.prototype.deserialize = function(id, done) {
    return this.api.getCollectionManager().getCollection('Clients', (function(_this) {
      return function(e, col) {
        return col.findOne(id, function(e, client) {
          return done != null ? done.apply(_this, !e ? [null, client] : [e, null]) : void 0;
        });
      };
    })(this));
  };

  OAuthModule.prototype.grant = function(client, redirectURI, user, ares, done) {
    var code, grant;
    code = utils.uid(16);
    return grant = new Grant(code, client.id, redirectURI, user.id, ares.scope).on('save', (function(_this) {
      return function(e) {
        return done != null ? done.apply(_this, !e ? [null, code] : [e, null]) : void 0;
      };
    })(this));
  };

  OAuthModule.prototype.exchange = function(client, code, redirectURI, done) {
    return Clients.findOne(code, function(err, code) {
      var token;
      if (e) {
        return done(e);
      }
      if (client.id !== code.clientId) {
        return done('invalid client id', false);
      }
      if (redirectURI !== code.redirectUri) {
        return done('invalid redirect url', false);
      }
      token = utils.uid(256);
      return new Credentials(token, code.userId, code.clientId, code.scope).on('save', (function(_this) {
        return function(e) {
          return done != null ? done.apply(_this, !e ? [null, token] : [e, null]) : void 0;
        };
      })(this));
    });
  };

  OAuthModule.prototype.onRegister = function() {
    var server;
    server = oauth2orize.createServer();
    server.serializeClient(this.serialize);
    server.deserializeClient(this.deserialize);
    server.grant(oauth2orize.grant.code(this.grant));
    server.exchange(oauth2orize.exchange.code(this.exchange));
    this.api.addRoute("/" + OAuthModule.namespace + "/token", 'post', function(req, res) {
      return passport.authenticate('consumer', {
        session: false
      });
    });
    this.api.addRoute("/" + OAuthModule.namespace + "/authorize", 'get', function(req, res) {
      return res.end('test');
    });
    this.api.addRoute((this.api.getAPIPath()) + "/" + OAuthModule.namespace + "/decision", 'get', function(req, res) {
      return res.end(JSON.stringify({
        body: "decision"
      }));
    });
    return this.api.addRoute((this.api.getAPIPath()) + "/" + OAuthModule.namespace + "/token", 'get', function(req, res) {
      return res.end(JSON.stringify({
        body: "token"
      }));
    });
  };

  OAuthModule.prototype.onRemove = function() {};

  return OAuthModule;

})();

OAuthModule.namespace = 'auth';

module.exports = OAuthModule;
