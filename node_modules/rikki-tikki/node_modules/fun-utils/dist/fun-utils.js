// Generated by CoffeeScript 1.7.1
var Fun, global;

global = typeof exports !== "undefined" && exports !== null ? exports : window;

'use strict';

global.Fun = Fun = {};

Fun.getFunctionName = function(fun) {
  var n;
  if ((n = fun.toString().match(/function+\s{1,}([a-zA-Z_0-9]*)/)) != null) {
    return n[1];
  } else {
    return null;
  }
};

Fun.getConstructorName = function(fun) {
  var name;
  return fun.constructor.name || ((name = this.getFunctionName(fun.constructor)) != null ? name : null);
};

Fun.construct = function(constructor, args) {
  return new (constructor.bind.apply(constructor, [null].concat(args)));
};

Fun.factory = Fun.construct.bind(null, Function);

Fun.fromString = function(string) {
  var m;
  if ((m = string.replace(/\n/g, '').replace(/[\s]{2,}/g, '').match(/^function+\s\(([a-zA-Z0-9_\s,]*)\)+\s?\{+(.*)\}+$/)) != null) {
    return Fun.factory([].concat(m[1], m[2]));
  } else {
    if ((m = string.match(new RegExp("^Native::(" + ((Object.keys(this.natives)).join('|')) + ")+$"))) != null) {
      return this.natives[m[1]];
    } else {
      return null;
    }
  }
};

Fun.toString = function(fun) {
  var s;
  if (typeof fun !== 'function') {
    return fun;
  }
  if (((s = fun.toString()).match(/.*\[native code\].*/)) != null) {
    return "Native::" + (this.getFunctionName(fun));
  } else {
    return s;
  }
};

Fun.natives = {
  'Date': Date,
  'Number': Number,
  'String': String,
  'Boolean': Boolean,
  'Array': Array,
  'Object': Object
};
