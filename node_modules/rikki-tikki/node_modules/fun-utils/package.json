{
  "author": {
    "name": "Van Carney"
  },
  "name": "fun-utils",
  "description": "Small Collection of Function Utilities",
  "keywords": [
    "function",
    "utilities",
    "factory",
    "construct",
    "name",
    "constructor",
    "utility"
  ],
  "version": "0.0.2",
  "preferGlobal": false,
  "main": "./index,js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/vancarney/fun-utils.git"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": ">=1.7.1",
    "mocha": ">=1.12.0",
    "chai": ">=1.7.2",
    "docco": ">=0.6.2"
  },
  "homepage": "https://github.com/vancarney/fun-utils.git",
  "scripts": {
    "test": "cake test"
  },
  "readme": "fun-utils\n=========\n\n[![Build Status](https://travis-ci.org/vancarney/fun-utils.png)](https://travis-ci.org/vancarney/fun-utils)\n[![NPM Version](http://img.shields.io/npm/v/fun-utils.svg)](https://www.npmjs.org/package/fun-utils)\n\nSmall collection of Function utility methods\n\n\nMethods\n-----------\n\n#### getFunctionName(function)\nAttempts to safely determine name of a named function\nreturns `string` or `null` if undefined\n\n*example:*\n```\nvar f = function testing() {};\nconsole.log( Fun.getFunctionName(f) );\n```\n\n#### getConstructorName(function)\nAttempts to safely determine name of the Class Constructor\nreturns `string` or `null` if undefined\n\n*example:*\n```\nvar d = new Date('05/Nov/1605');\nconsole.log( Fun.getConstructorName(d) );\n```\n\n#### construct(constructor, args)\nInvokes a Constructor with optional arguments array\n\n*example:*\n```\nconsole.log( Fun.construct( Date, '5/Nov/1605' ).toString() );\n```\n\n#### factory(args)\nReturns an arbitrary Function from array\n\n*example:*\n```\nconsole.log( Fun.factory( ['a,b', 'return a + b'] )(2,2) );\n```\n\n#### fromString(string)\nCreates function from string (simple functions only -- does not support nesting)\n\n*example:*\n```\nstr = 'function (a, b) { return a+b; }';\nconsole.log( Fun.fromString( str )(2,2) );\n```\n\n#### toString(function)\nConverts function to string, using encoding to handle native objects (simple functions only -- does not support nesting)\n\n*example:*\n```\nvar f = function (a,b) { return a + b; };\nconsole.log( Fun.toString( f ) );\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vancarney/fun-utils/issues"
  },
  "_id": "fun-utils@0.0.2",
  "_shasum": "e98c33fc5b4beee5cb8d7180f7fbf0c4328c492c",
  "_resolved": "git+https://github.com/vancarney/fun-utils.git#df540146f63ad04590c41a0f167bfa87d63ce7ed",
  "_from": "fun-utils@>=0.0.2"
}
