// Generated by CoffeeScript 1.7.1
var global;

global = typeof exports !== "undefined" && exports !== null ? exports : window;

global.Hash = (function() {
  'use strict';
  function Hash(object, restrict_keys) {
    var escapeKey, unescapeKey;
    if (object == null) {
      object = {};
    }
    if (restrict_keys == null) {
      restrict_keys = [];
    }
    escapeKey = function(key) {
      if (key.length > 2 && key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95) {
        return "" + key + "%";
      } else {
        return "" + key;
      }
    };
    unescapeKey = function(key) {
      if (key.length > 2 && key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95) {
        return "" + (key.substr(0, key.length - 1));
      } else {
        return "" + key;
      }
    };
    this.get = (function(_this) {
      return function(key) {
        return object[escapeKey(key)];
      };
    })(this);
    this.set = (function(_this) {
      return function(key, value) {
        var k, v;
        if (typeof key === 'string') {
          if (restrict_keys.length && 0 > restrict_keys.indexOf(key)) {
            return _this;
          }
          object[escapeKey(key)] = value;
        } else if (typeof key === 'object') {
          for (k in key) {
            v = key[k];
            _this.set(k, v);
          }
        }
        return _this;
      };
    })(this);
    this.has = (function(_this) {
      return function(key) {
        return object.hasOwnProperty(escapeKey(key));
      };
    })(this);
    this.del = (function(_this) {
      return function(key) {
        if (_this.has(key)) {
          return delete object[escapeKey(key)];
        }
      };
    })(this);
    this.forEach = (function(_this) {
      return function(iterator, scope) {
        var key, _results;
        _results = [];
        for (key in object) {
          if (!object.hasOwnProperty(key)) {
            continue;
          }
          _results.push(iterator.call(scope, object[key], unescapeKey(key)));
        }
        return _results;
      };
    })(this);
    this.keys = (function(_this) {
      return function() {
        var keys;
        keys = [];
        _this.forEach(function(value, key) {
          return keys.push(key);
        });
        return keys;
      };
    })(this);
    this.valueOf = (function(_this) {
      return function() {
        return object;
      };
    })(this);
    this.toJSON = (function(_this) {
      return function() {
        return object;
      };
    })(this);
    this.toString = (function(_this) {
      return function(pretty) {
        if (pretty == null) {
          pretty = false;
        }
        return JSON.stringify(_this.toJSON(), null, (pretty ? 2 : void 0));
      };
    })(this);
    this.canFreeze = (function(_this) {
      return function() {
        return typeof Object.freeze === 'function';
      };
    })(this);
    this.freeze = (function(_this) {
      return function() {
        if (_this.canFreeze()) {
          Object.freeze(_this);
          Object.freeze(object);
        }
        return _this;
      };
    })(this);
    this.isFrozen = (function(_this) {
      return function() {
        if (_this.canFreeze()) {
          return Object.isFrozen(object);
        } else {
          return false;
        }
      };
    })(this);
    this.canSeal = (function(_this) {
      return function() {
        return typeof Object.seal === 'function';
      };
    })(this);
    this.seal = (function(_this) {
      return function() {
        if (_this.canSeal()) {
          Object.seal(_this);
          Object.seal(object);
        }
        return _this;
      };
    })(this);
    this.isSealed = (function(_this) {
      return function() {
        if (_this.canSeal()) {
          return Object.isSealed(object);
        } else {
          return false;
        }
      };
    })(this);
    this.canPreventExtensions = (function(_this) {
      return function() {
        return typeof Object.preventExtensions === 'function';
      };
    })(this);
    this.isExtensible = (function(_this) {
      return function() {
        if (_this.canPreventExtensions()) {
          return Object.isExtensible(object);
        } else {
          return true;
        }
      };
    })(this);
    this.preventExtensions = (function(_this) {
      return function() {
        if (_this.canPreventExtensions()) {
          Object.preventExtensions(_this);
          Object.preventExtensions(object);
        }
        return _this;
      };
    })(this);
  }

  return Hash;

})();
