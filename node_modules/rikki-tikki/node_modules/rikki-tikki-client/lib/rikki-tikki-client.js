// Generated by CoffeeScript 1.9.0
(function() {
  var Backbone, RikkiTikki, global, _;

  global = typeof exports !== "undefined" && exports !== null ? exports : window;

  _ = global._ || (typeof exports !== 'undefined' ? require('lodash') : null);

  Backbone = global.Backbone || (typeof exports !== 'undefined' ? require('backbone') : null);

  Backbone.$ = global.jQuery || (typeof exports !== 'undefined' ? require('jQuery') : null);

  if (!global.RikkiTikki) {
    RikkiTikki = global.RikkiTikki = (function() {
      var app, _appLayer;
      _appLayer = function(ns) {
        var $scope, type;
        if ((type = typeof ns) !== 'string') {
          throw "Namespace required to be type 'String'. Type was '<" + type + ">'";
        }
        $scope = global["" + ns] = {
          __SCHEMAS__: {},
          ALLOWED: ['APP_ID', 'REST_KEY', 'HOST', 'PORT', 'BASE_PATH', 'MAX_BATCH_SIZE', 'DEFAULT_FETCH_LIMIT_OVERRIDE', 'UNDEFINED_CLASSNAME'],
          VERSION: '0.1.1-alpha',
          APP_ID: void 0,
          APP_ID_PARAM_NAME: 'APP_ID',
          REST_KEY: void 0,
          REST_KEY_PARAM_NAME: 'REST_KEY',
          SESSION_TOKEN: void 0,
          CSRF_TOKEN: void 0,
          API_VERSION: '1',
          MAX_BATCH_SIZE: 50,
          DEFAULT_FETCH_LIMIT_OVERRIDE: 200000,
          UNDEFINED_CLASSNAME: '__UNDEFINED_CLASSNAME__',
          API_URI: null,
          CORS: true,
          PROTOCOL: 'HTTP',
          HOST: '0.0.0.0',
          PORT: 80,
          BASE_PATH: '/api',
          CAPITALIZE_CLASSNAMES: false,
          CRUD_METHODS: {
            create: 'POST',
            read: 'GET',
            update: 'PUT',
            destroy: 'DELETE'
          },
          getSchema: function(name) {
            var s;
            if ((s = this.__SCHEMAS__[name]) != null) {
              return s;
            } else {
              return null;
            }
          },
          createSchema: function(name, options) {
            var s;
            if (options == null) {
              options = {};
            }
            if ((s = this.getSchema(name)) != null) {
              return _.extend(s, options);
            } else {
              return $scope.__SCHEMAS__[name] = new this.Schema(options);
            }
          },
          extend: function(object) {
            return _.extend(this, object);
          }
        };
        var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
          __hasProp = {}.hasOwnProperty,
          __slice = [].slice,
          __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
        
        $scope.apiOPTS = function() {
          var o;
          return o = {
            contentType: "application/json",
            processData: false,
            dataType: 'json',
            data: null,
            headers: {
              'Content-Type': 'application/json',
              'X-Application-Id': $scope.APP_ID,
              'X-REST-API-Key': $scope.REST_KEY,
              'X-Session-Token': $scope.SESSION_TOKEN,
              'X-CSRF-Token': $scope.CSRF_TOKEN,
              'X-User-Token': $scope.USER_TOKEN,
              'X-User-Email': $scope.USER_EMAIL
            }
          };
        };
        
        $scope.regEscape = function(string) {
          return string.replace(/([\^\/\.\-\+\*\[\]\{\}\|\(\)\?\$]+)/g, '\\$1');
        };
        
        $scope.getAPIUrl = function() {
          return (this.PROTOCOL.toLowerCase()) + "://" + this.HOST + (this.PORT !== 80 ? ':' + this.PORT : '') + "/" + (this.BASE_PATH.replace(/^\//, '')) + "/" + this.API_VERSION;
        };
        
        $scope.validateRoute = function(route) {
          if (!route.match(new RegExp("^(" + ($scope.regEscape(this.getAPIUrl())) + "\/)+"))) {
            throw "Bad route: " + route;
          }
          return true;
        };
        
        $scope._parseDate = function(iso8601) {
          var t;
          if ((t = iso8601.match(/^([0-9]{1,4})\-([0-9]{1,2})\-([0-9]{1,2})T+([0-9]{1,2}):+([0-9]{1,2}):?([0-9]{1,2})?(.([0-9]+))?Z+$/)) === null) {
            return null;
          }
          return new Date(Date.UTC(t[1] || 0, (t[2] || 1) - 1, t[3] || 0, t[4] || 0, t[5] || 0, t[6] || 0, t[8] || 0));
        };
        
        $scope.querify = function(obj) {
          return (_.map(_.pairs(obj || {}), (function(_this) {
            return function(v, k) {
              return v.join('=');
            };
          })(this))).join('&');
        };
        
        $scope.getConstructorName = function(fun) {
          var name;
          return fun.constructor.name || ((name = $scope.getFunctionName(fun.constructor)) != null ? name : $scope.UNDEFINED_CLASSNAME);
        };
        
        $scope.getTypeOf = function(obj) {
          return Object.prototype.toString.call(obj).slice(8, -1);
        };
        
        $scope.getFunctionName = function(fun) {
          var n;
          if ((n = fun.toString().match(/function+\s{1,}([a-zA-Z]{1,}[_0-9a-zA-Z]?)/)) != null) {
            return n[1];
          } else {
            return null;
          }
        };
        
        $scope.isOfType = function(value, kind) {
          return (this.getTypeOf(value)) === (this.getFunctionName(kind)) || value instanceof kind;
        };
        
        $scope._encode = function(value, seenObjects, disallowObjects) {
          var o;
          if (value instanceof $scope.Model && disallowObjects) {
            throw "$scope.Models not allowed here";
          }
          if (value instanceof $scope.Object && (value._toPointer != null) && typeof value._toPointer === 'function') {
            return value._toPointer();
          }
          if (value.hasOwnProperty('dirty' && typeof value.dirty === 'Function' && !value.dirty())) {
            return $scope._encode(value._toFullJSON(seenObjects = seenObjects.concat(value)), seenObjects, disallowObjects);
          }
          if (value instanceof $scope.Object && value.isNew()) {
            throw 'Tried to save Model with a Pointer to an new or unsaved Object.';
          }
          if (_.isDate(value)) {
            return {
              __type: Date,
              iso: value.toJSON()
            };
          }
          if (_.isArray(value)) {
            return _.map(value, (function(v) {
              return $scope._encode(v, seenObjects, disallowObjects);
            }));
          }
          if (_.isRegExp(value)) {
            return value.source;
          }
          if (($scope.Relation && value instanceof $scope.Relation) || ($scope.Op && value instanceof $scope.Op) || ($scope.GeoPoint && value instanceof $scope.GeoPoint)) {
            return value.toJSON();
          }
          if ($scope.File && value instanceof $scope.File) {
            if (!value.url()) {
              throw 'Tried to save an object containing an unsaved file.';
            }
            return {
              __type: "File",
              name: value.name(),
              url: value.url()
            };
          }
          if (_.isObject(value)) {
            o = {};
            _.each(value, function(v, k) {
              return o[k] = $scope._encode(v, seenObjects, disallowObjects);
            });
            return o;
          }
          return value;
        };
        
        $scope._decode = function(key, value) {
          var cN, f, o, p, r;
          if (!_.isObject(value)) {
            return value;
          }
          if (_.isArray(value)) {
            _.each(value, function(v, k) {
              return value[k] = $scope._decode(k, v);
            });
            return value;
          }
          if ((value instanceof $scope.Object) || ($scope.File && value instanceof $scope.File) || ($scope.OP && value instanceof $scope.Op)) {
            return value;
          }
          if (value.__op) {
            return $scope.OP._decode(value);
          }
          if (value.__type && value.__type === 'Pointer') {
            p = $scope.Object._create(value.className);
            p._finishFetch({
              objectId: value.objectId
            }, false);
            return p;
          }
          if (value.__type && value.__type === 'Object') {
            cN = value.className;
            delete value.__type;
            delete value.className;
            o = $scope.Object._create(cN);
            o._finishFetch(value, true);
            return o;
          }
          if (value.__type === 'Date') {
            return $scope._parseDate(value.iso);
          }
          if ($scope.GeoPoint && value.__type === 'GeoPoint') {
            return new $scope.GeoPoint({
              latitude: value.latitude,
              longitude: value.longitude
            });
          }
          if ($scope.Relation && value.__type === 'Relation') {
            (r = new $scope.Relation(null, key)).targetClassName = value.className;
            return r;
          }
          if ($scope.File && value.__type === 'File') {
            (f = new sarse.File(value.name)).url = value.url;
            return f;
          }
          _.each(value, function(v, k) {
            return value[k] = $scope._decode(k, v);
          });
          return value;
        };
        
        $scope.Function = {};
        
        $scope.Function.construct = function(constructor, args) {
          return new (constructor.bind.apply(constructor, [null].concat(args)));
        };
        
        $scope.Function.factory = $scope.Function.construct.bind(null, Function);
        
        $scope.Function.fromString = function(string) {
          var m;
          if ((m = string.match(/^function+\s?\(([a-zA-Z0-9_\s\S\,]?)\)+\s?\{([\s\S]*)\}$/)) != null) {
            return $scope.Function.factory(_.union(m[1], m[2]));
          } else {
            if ((m = string.match(new RegExp("^Native::(" + (_.keys($scope.Function.natives).join('|')) + ")+$"))) != null) {
              return $scope.Function.natives[m[1]];
            } else {
              return null;
            }
          }
        };
        
        $scope.Function.toString = function(fun) {
          var s;
          if (typeof fun !== 'function') {
            return fun;
          }
          if (((s = fun.toString()).match(/.*\[native code\].*/)) != null) {
            return "Native::" + ($scope.getFunctionName(fun));
          } else {
            return s;
          }
        };
        
        $scope.Function.natives = {
          'Date': Date,
          'Number': Number,
          'String': String,
          'Boolean': Boolean,
          'Array': Array,
          'Object': Object
        };
        
        $scope.Inflection = new (function() {
          return {
            __uncountable_words: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'moose', 'deer', 'news'],
            __plural_rules: [[/(m)an$/gi, '$1en'], [/(pe)rson$/gi, '$1ople'], [/(child)$/gi, '$1ren'], [/^(ox)$/gi, '$1en'], [/(ax|test)is$/gi, '$1es'], [/(octop|vir)us$/gi, '$1i'], [/(alias|status)$/gi, '$1es'], [/(bu)s$/gi, '$1ses'], [/(buffal|tomat|potat)o$/gi, '$1oes'], [/([ti])um$/gi, '$1a'], [/sis$/gi, 'ses'], [/(?:([^f])fe|([lr])f)$/gi, '$1$2ves'], [/(hive)$/gi, '$1s'], [/([^aeiouy]|qu)y$/gi, '$1ies'], [/(x|ch|ss|sh|lens)$/gi, '$1es'], [/(matr|vert|ind)ix|ex$/gi, '$1ices'], [/([m|l])ouse$/gi, '$1ice'], [/(quiz)$/gi, '$1zes'], [/s$/gi, 's'], [/$/gi, 's']],
            apply_rules: function(str, rules, skip) {
              var rx;
              if ((skip.indexOf(str.toLowerCase())) === -1) {
                if ((rx = _.find(rules, (function(_this) {
                  return function(itm) {
                    return str.match(itm[0]);
                  };
                })(this))) != null) {
                  return str.replace(rx[0], rx[1]);
                }
              }
              return str;
            },
            pluralize: function(str) {
              return this.apply_rules(str, this.__plural_rules, this.__uncountable_words);
            }
          };
        });
        
        $scope.Singleton = (function(_super) {
          __extends(Singleton, _super);
        
          function Singleton() {
            var cName, isDescended, matchSig, _caller, _caller_super;
            cName = $scope.getConstructorName(this);
            _caller = arguments.callee.caller.caller;
            _caller_super = arguments.callee.caller;
            while (typeof _caller.__super__ !== 'undefined') {
              _caller_super = _caller;
              _caller = _caller.caller;
            }
            isDescended = ($scope.getFunctionName(arguments.callee.caller.__super__.constructor)) === 'Singleton';
            matchSig = ((function(_this) {
              return function(sig) {
                return (sig.replace(/[\n\t]|[\s]{2,}/g, '')) === ("function () {return this.__instance != null ? this.__instance : this.__instance = new " + cName + "();}");
              };
            })(this))(_caller.toString());
            if (!isDescended || !matchSig || typeof _caller_super.getInstance !== 'function') {
              throw cName + " is a Singleton. Try creating/accessing with " + cName + ".getInstance()";
            }
          }
        
          return Singleton;
        
        })(Object);
        
        $scope.Object = (function(_super) {
          __extends(Object, _super);
        
          Object.prototype.idAttribute = '_id';
        
          Object.prototype.__schema = {
            paths: {},
            virtuals: {}
          };
        
          Object.prototype.createOptions = function(options) {
            var success;
            success = options.success || null;
            return _.extend(options, {
              success: (function(_this) {
                return function(m, r, o) {
                  $scope.SESSION_TOKEN = r.session_id;
                  $scope.CSRF_TOKEN = r.csrf_token;
                  $scope.USER_EMAIL = r.user_email;
                  $scope.USER_TOKEN = r.user_token;
                  return success != null ? success.apply(_this, arguments) : void 0;
                };
              })(this)
            });
          };
        
          function Object(attrs, opts) {
            if (attrs == null) {
              attrs = {};
            }
            if (opts == null) {
              opts = {};
            }
            Object.__super__.constructor.call(this, attrs, opts);
            if ((this.className != null ? this.className : this.className = $scope.getConstructorName(this)) === $scope.UNDEFINED_CLASSNAME) {
              console.warn(namespace + ".Object requires className to be defined");
            } else {
              this.className = $scope.Inflection.pluralize(this.className);
            }
            this.setSchema(_.extend($scope.getSchema(this.className) || this.__schema, opts.schema || {}));
          }
        
          Object.prototype.setSchema = function(schema) {
            var methods, statics, virtuals;
            this.__schema = _.extend(this.__schema, schema);
            if ((methods = this.__schema.methods) != null) {
              _.each(methods, (function(_this) {
                return function(v, k) {
                  return _this[k] = function() {
                    return v.apply(_this, arguments);
                  };
                };
              })(this));
            }
            if ((virtuals = this.__schema.virtuals) != null) {
              _.each(virtuals, (function(_this) {
                return function(v, k) {
                  return _this[k] = $scope.Function.fromString(v);
                };
              })(this));
            }
            if ((statics = this.__schema.statics) != null) {
              _.each(statics, (function(_this) {
                return function(v, k) {
                  return $scope.Object[k] = $scope.Function.fromString(v);
                };
              })(this));
            }
            if (this.__schema.paths != null) {
              return _.each(this.__schema.paths, (function(_this) {
                return function(v, k) {
                  return (_this.defaults != null ? _this.defaults : _this.defaults = {})[k] = v["default"] || null;
                };
              })(this));
            }
          };
        
          Object.prototype.getSchema = function() {
            return this.__schema;
          };
        
          Object.prototype.validate = function(attrs, opts) {
            var k, path, v, validator, _i, _len, _ref;
            if (attrs == null) {
              attrs = {};
            }
            if (opts == null) {
              opts = {};
            }
            if ($scope.env !== 'development') {
              for (k in attrs) {
                v = attrs[k];
                if ((path = this.getSchema().paths[k]) != null) {
                  _ref = path.validators || [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    validator = _ref[_i];
                    if ((validator[0](v)) === false) {
                      return validator[1];
                    }
                  }
                } else {
                  if (k !== this.idAttribute) {
                    return this.className + " has no attribute '" + k + "'";
                  }
                }
              }
            }
          };
        
          Object.prototype.url = function() {
            var base, item, p, ref, search;
            base = $scope.getAPIUrl();
            ref = !$scope.CAPITALIZE_CLASSNAMES ? this.className.toLowerCase() : this.className;
            item = !this.isNew() ? "/" + (this.get(this.idAttribute)) : '';
            search = (p = $scope.querify(this.__op)).length ? "?" + p : '';
            return base + "/" + ref + item + search;
          };
        
          Object.prototype.sync = function(method, model, options) {
            var encode, opts;
            if (options == null) {
              options = {};
            }
            opts = $scope.apiOPTS();
            encode = function(o) {
              if (_.isObject(o && o.hasOwnProperty('_toPointer' && typeof o._toPointer === 'function'))) {
                o = o._toPointer();
              }
              return o;
            };
            if (method.match(/^(create|read)+$/)) {
              _.each(model.attributes, (function(_this) {
                return function(v, k) {
                  if (_.isObject(v)) {
                    v = encode(v);
                  }
                  if (_.isArray(v)) {
                    return _.map(v, function(o) {
                      if (_.isObject) {
                        return encode(o);
                      } else {
                        return o;
                      }
                    });
                  }
                };
              })(this));
            }
            opts.data = !this._query ? JSON.stringify(this.toJSON()) : "where=" + (this._query.toJSON());
            $scope.validateRoute(options.url != null ? options.url : options.url = _.result(this, 'url') || '/');
            return Object.__super__.sync.call(this, method, model, _.extend(options, opts));
          };
        
          Object.prototype.get = function(attr) {
            var v, value;
            if (this.__schema.virtuals[attr]) {
              value = (_.isArray((v = this.__schema.virtuals[attr])) ? v : [v]).reduce((function(_this) {
                return function(prev, curr, idx, arr) {
                  return curr.apply(_this);
                };
              })(this));
            } else {
              value = Object.__super__.get.call(this, attr);
            }
            return value;
          };
        
          Object.prototype.set = function(attrs, opts) {
            var s;
            if (opts == null) {
              opts = {};
            }
            if ((attrs != null) && _.isObject(attrs)) {
              _.each(attrs, (function(_this) {
                return function(v, k) {
                  var attr, oV, _ref;
                  if (_this.__schema.virtuals[k]) {
                    return attr = (_.isArray((v = _this.__schema.virtuals[k])) ? v : [v]).reduce(function(prev, curr, idx, arr) {
                      return curr.apply(_this, value);
                    });
                  } else {
                    if (v != null ? v.hasOwnProperty('_toPointer' && typeof v._toPointer === 'Function') : void 0) {
                      v = v._toPointer();
                      if (((_ref = (oV = _this.get(k))) != null ? _ref.__op : void 0) != null) {
                        return (oV.objects != null ? oV.objects : oV.objects = []).push(v);
                      } else {
                        return {
                          k: {
                            __op: "AddRelation",
                            objects: [v]
                          }
                        };
                      }
                    }
                  }
                };
              })(this));
            }
            s = Object.__super__.set.call(this, attrs, opts);
            if (this.changedAttributes()) {
              this.__isDirty = true;
            }
            return s;
          };
        
          Object.prototype.save = function(attributes, options) {
            var children, files, pre, self;
            if (options == null) {
              options = {};
            }
            self = this;
            $scope.Object._findUnsavedChildren(this.attributes, children = [], files = []);
            if ((pre = this.getSchema().pre) != null) {
              if (typeof pre.save === "function") {
                pre.save();
              }
            }
            if (children.length) {
              return $scope.Object.saveAll(children, {
                completed: (function(_this) {
                  return function(m, r, o) {
                    var rt;
                    if ((m.responseText != null) && (rt = JSON.parse(m.responseText)) instanceof Array) {
                      _.each(_this.attributes, function(v, k) {
                        if (v instanceof $scope.Object && (typeof v.get === "function" ? v.get('objectId') : void 0) === rt[0].success.objectId) {
                          return _this.attributes[k] = {
                            __op: "AddRelation",
                            objects: [p]
                          };
                        }
                      });
                    }
                    return Object.__super__.save.call(self, attributes, {
                      success: function() {
                        return typeof options.completed === "function" ? options.completed(m, r, o) : void 0;
                      },
                      error: function() {
                        return console.log('save failed');
                      }
                    });
                  };
                })(this),
                success: (function(_this) {
                  return function(m, r, o) {
                    var post;
                    if ((post = _this.getSchema().post) != null) {
                      if (typeof post.save === "function") {
                        post.save();
                      }
                    }
                    return typeof options.success === "function" ? options.success(m, r, o) : void 0;
                  };
                })(this),
                error: (function(_this) {
                  return function(m, r, o) {
                    return typeof options.error === "function" ? options.error(m, r, o) : void 0;
                  };
                })(this)
              });
            } else {
              return Object.__super__.save.call(this, attributes, options);
            }
          };
        
          Object.prototype.toJSON = function(options) {
            var data;
            data = (Object.__super__.toJSON.call(this, options)) || {};
            if (data.createdAt != null) {
              delete data.createdAt;
            }
            if (data.updatedAt != null) {
              delete data.updatedAt;
            }
            return data;
          };
        
          Object.prototype._toFullJSON = function(seenObjects) {
            var json;
            _.each((json = _.clone(this.attributes)), function(v, k) {
              return json[key] = $scope._encode(v, seenObjects);
            });
            _.each(this.__op, function(v, k) {
              return json[v] = k;
            });
            if (_.has(this, 'id')) {
              json.objectId = this.id;
            }
            if (_.has(this, 'createdAt')) {
              json.createdAt = (_.isDate(this.createdAt) ? this.createdAt.toJSON() : this.createdAt);
            }
            if (_.has(this, 'updatedAt')) {
              json.updatedAt = (_.isDate(this.updatedAt) ? this.updatedAt.toJSON() : this.updatedAt);
            }
            json.__type = 'Object';
            json.className = this.className;
            return json;
          };
        
          Object.prototype.nestCollection = function(aName, nCollection) {
            var i, item, _i, _len;
            for (i = _i = 0, _len = nCollection.length; _i < _len; i = ++_i) {
              item = nCollection[i];
              this.attributes[aName][i] = (nCollection.at(i)).attributes;
            }
            nCollection.bind('add', (function(_this) {
              return function(initiative) {
                if (!_this.get(aName)) {
                  _this.attributes[aName] = [];
                }
                return (_this.get(aName)).push(initiative.attributes);
              };
            })(this));
            nCollection.bind('remove', (function(_this) {
              return function(initiative) {
                var updateObj;
                updateObj = {};
                updateObj[aName] = _.without(_this.get(aName), initiative.attributes);
                return _this.set(updateObj);
              };
            })(this));
            return nCollection;
          };
        
          Object.prototype.__op = null;
        
          Object.prototype._serverData = {};
        
          Object.prototype._opSetQueue = [{}];
        
          Object.prototype.__isDirty = false;
        
          Object.prototype.dirty = function() {
            return this.__isDirty || this.hasChanged();
          };
        
          Object.prototype._toPointer = function() {
            if (this.isNew()) {
              throw new Error("Can't serialize an unsaved " + namespace + ".Object");
            }
            return {
              __type: 'Pointer',
              className: this.className,
              objectId: this.id
            };
          };
        
          Object.prototype._finishFetch = function(serverData, hasData) {
            this._opSetQueue = [{}];
            this._mergeMagicFields(serverData);
            _.each(serverData, (function(_this) {
              return function(v, k) {
                return _this._serverData[key] = $scope._decode(k, v);
              };
            })(this));
            this._hasData = hasData;
            return this.__isDirty = false;
          };
        
          Object.prototype._mergeMagicFields = function(attrs) {
            return _.each(['id', 'objectId', 'createdAt', 'updatedAt'], (function(_this) {
              return function(attr) {
                if (attrs[attr]) {
                  switch (attrs[attr]) {
                    case 'objectId':
                      _this.id = attrs[attr];
                      break;
                    case 'createdAt':
                    case 'updatedAt':
                      _this[attr] = !_.isDate(attrs[attr]) ? $scope._parseDate(attrs[attr]) : attrs[attr];
                  }
                  return delete attrs[attr];
                }
              };
            })(this));
          };
        
          Object.prototype.add = function(attr, objects) {
            var a;
            if (_.isArray((a = this.get('attr')))) {
              this.set(({}[attr] = a.concat(objects)), null);
            }
            return this.changedAttributes();
          };
        
          Object.prototype.addUnique = function(attr, objects) {
            var a;
            if (_.isArray((a = this.get('attr')))) {
              this.set(({}[attr] = _.union(a, objects)), null);
            }
            return this.changedAttributes();
          };
        
          Object.prototype.increment = function(attr, amount) {
            var a;
            if (_.isNumber((a = this.get('attr')))) {
              this.set({}[attr] = a + (amount != null ? amount : amount = 1), null);
            }
            return this.changedAttributes();
          };
        
          Object.prototype.addRelation = function(key, relation) {
            return (this.__op != null ? this.__op : this.__op = new $scope.OP(this)).addRelation(key, relation);
          };
        
          Object.prototype.removeRelation = function(key, relation) {
            return (this.__op != null ? this.__op : this.__op = new $scope.OP(this)).removeRelation(key, relation);
          };
        
          Object.prototype.createRelation = function(key) {
            return (this.__op != null ? this.__op : this.__op = new $scope.OP(this)).relation(key);
          };
        
          Object.prototype.relation = function(key) {
            return this.createRelation(key);
          };
        
          return Object;
        
        })(Backbone.Model);
        
        $scope.Object._classMap = {};
        
        $scope.Object._getSubclass = function(className) {
          var clazz, _base;
          if (!_.isString(className)) {
            throw namespace + ".Object._getSubclass requires a string argument.";
          }
          return (_base = $scope.Object._classMap)[className] != null ? _base[className] : _base[className] = (clazz = $scope.Object._classMap[className]) ? clazz : $scope.Object.extend(className);
        };
        
        $scope.Object._findUnsavedChildren = function(object, children, files) {
          return _.each(object, (function(_this) {
            return function(obj) {
              if (obj instanceof $scope.Object) {
                if (obj.dirty()) {
                  children.push(obj);
                }
              }
            };
          })(this));
        };
        
        $scope.Object._create = function(className, attr, opts) {
          var clazz;
          if (typeof (clazz = $scope.Object._getSubclass(className)) === 'function') {
            return new clazz(attr, opts);
          } else {
            throw "unable to create " + className;
          }
        };
        
        $scope.Object.saveAll = function(list, options) {
          return (new $scope.Batch(list)).exec({
            success: (function(_this) {
              return function(m, r, o) {
                if (options.success) {
                  return options.success(m, r, o);
                }
              };
            })(this),
            completed: (function(_this) {
              return function(m, r, o) {
                if (options.completed) {
                  return options.completed(m, r, o);
                }
              };
            })(this),
            error: (function(_this) {
              return function(m, r, o) {
                if (options.error) {
                  return options.error(m, r, o);
                }
              };
            })(this)
          });
        };
        
        $scope.Object.destroyAll = function(list, options) {
          return (new $scope.Batch).destroy(list, {
            success: (function(_this) {
              return function(m, r, o) {
                if (options.success) {
                  return options.success(m, r, o);
                }
              };
            })(this),
            complete: (function(_this) {
              return function(m, r, o) {
                if (options.complete) {
                  return options.complete(m, r, o);
                }
              };
            })(this),
            error: (function(_this) {
              return function(m, r, o) {
                if (options.error) {
                  return options.error(m, r, o);
                }
              };
            })(this)
          });
        };
        
        $scope.Model = $scope.Object;
        
        $scope.Collection = (function(_super) {
          __extends(Collection, _super);
        
          Collection.prototype.__count = void 0;
        
          Collection.prototype.count = function() {
            return this.__count || this.models.length;
          };
        
          Collection.prototype.__params = {
            limit: $scope.DEFAULT_FETCH_LIMIT_OVERRIDE,
            count: 1
          };
        
          Collection.prototype.url = function() {
            var p;
            return encodeURI(($scope.getAPIUrl()) + "/" + this.className + (this.__method === 'read' && (p = $scope.querify(this.__params)).length ? '?' + p : ''));
          };
        
          Collection.prototype.parse = function(options) {
            var data;
            return (data = Collection.__super__.parse.call(this, options)).results || data;
          };
        
          Collection.prototype.schema = {};
        
          Collection.prototype.__schema = null;
        
          Collection.prototype.sync = function(_at___method, model, options) {
            var opts;
            this.__method = _at___method;
            if (options == null) {
              options = {};
            }
            opts = $scope.apiOPTS();
            if (this.__method === $scope.CRUD_METHODS.read) {
              _.each(['order', 'count', 'limit', 'where'], (function(_this) {
                return function(v, k) {
                  if (options[v]) {
                    _this.__params[v] = (JSON.stringify(options[v])).replace(/\\{2}/g, '\\');
                    return delete options[v];
                  }
                };
              })(this));
            }
            opts.data = !this.__query ? JSON.stringify(this.toJSON()) : "where=" + this.__query;
            opts.success = (function(_this) {
              return function(m, r, o) {
                var _ref;
                _this.__params = {
                  limit: $scope.DEFAULT_FETCH_LIMIT_OVERRIDE,
                  count: 1
                };
                if ((_ref = _this.__query) != null) {
                  _ref.clear();
                }
                if (options.success != null) {
                  return options.success(m, r, o);
                }
              };
            })(this);
            opts.error = (function(_this) {
              return function(m, r, o) {
                if (options.error) {
                  return options.error(m, r, o);
                }
              };
            })(this);
            return Collection.__super__.sync.call(this, this.__method, this, _.extend(_.clone(options), opts, this.__query ? {
              where: this.__query.toJSON()
            } : {}));
          };
        
          Collection.prototype._prepareModel = function(attrs, options) {
            options.schema = _.extend(this.schema || {}, options.schema || {});
            return Collection.__super__._prepareModel.call(this, attrs, options);
          };
        
          Collection.prototype.schemaAdd = function(obj, prefix) {
            return this.__schema.add(obj, prefix);
          };
        
          Collection.prototype.schemaGet = function(key) {
            return this.__schema.get(key);
          };
        
          Collection.prototype.schemaSet = function(key, value, _tags) {
            return this.__schema.set(key, value, _tags);
          };
        
          Collection.prototype.schemaIndex = function(fields, opts) {
            return this.__schema(fields, opts);
          };
        
          Collection.prototype.schemaMethod = function(name, fn) {
            return this.__schema.method(name, fn);
          };
        
          Collection.prototype.schemaStatic = function(name, fn) {
            return this.__schema["static"](name, fn);
          };
        
          Collection.prototype.schemaVirtual = function(name, fn) {
            return this.__schema.virtuals(name, fn);
          };
        
          Collection.prototype.schemaReserved = function() {
            return $scope.Schema.reserved();
          };
        
          Collection.prototype.query = function() {
            if (this.__query == null) {
              this.__query = new $scope.Query(this.className);
            }
            return this.__query;
          };
        
          Collection.prototype.findAll = function() {
            return this.query().limit();
          };
        
          Collection.prototype.save = function(options) {
            return (new $scope.Batch(_.compact(_.map(this.models, function(v, k) {
              if (v.isNew() || v.dirty()) {
                return v;
              }
            })))).exec(options({
              complete: (function(_this) {
                return function(m, r, o) {
                  if (options.success) {
                    return options.success(m, r, o);
                  }
                };
              })(this),
              error: (function(_this) {
                return function(m, r, o) {
                  if (options.error) {
                    return options.error(m, r, o);
                  }
                };
              })(this)
            }));
          };
        
          function Collection(attrs, opts) {
            if (opts == null) {
              opts = {};
            }
            Collection.__super__.constructor.call(this, attrs, opts);
            if ((this.className != null ? this.className : this.className = $scope.getConstructorName(this)) === $scope.UNDEFINED_CLASSNAME) {
              console.warn(namespace + ".Collection requires className to be defined");
            } else {
              this.className = $scope.Inflection.pluralize(this.className);
            }
            this.__schema = new $scope.Schema(_.extend($scope.getSchema(this.className) || {}, this.schema, opts.schema || {}));
          }
        
          Collection.prototype.or = function() {
            var queries;
            queries = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            this.query().or($scope.Query.or(queries));
            return this;
          };
        
          Collection.prototype.equalTo = function(col, value) {
            (!this.__query ? this.query() : this.__query).equalTo(col, value);
            return this;
          };
        
          Collection.prototype.notEqualTo = function(col, value) {
            (!this.__query ? this.query() : this.__query).notEqualTo(col, value);
            return this;
          };
        
          Collection.prototype.greaterThan = function(col, value) {
            (!this.__query ? this.query() : this.__query).greaterThan(col, value);
            return this;
          };
        
          Collection.prototype.greaterThanOrEqualTo = function(col, value) {
            (!this.__query ? this.query() : this.__query).greaterThanOrEqualTo(col, value);
            return this;
          };
        
          Collection.prototype.lessThan = function(col, value) {
            (!this.__query ? this.query() : this.__query).lessThan(col, value);
            return this;
          };
        
          Collection.prototype.lessThanOrEqualTo = function(col, value) {
            (!this.__query ? this.query() : this.__query).lessThanOrEqualTo(col, value);
            return this;
          };
        
          Collection.prototype.contains = function(col, value) {
            (!this.__query ? this.query() : this.__query).contains(col, value);
            return this;
          };
        
          Collection.prototype.containsAll = function(col, array) {
            (!this.__query ? this.query() : this.__query).containsAll(col, array);
            return this;
          };
        
          Collection.prototype.containedIn = function(col, array) {
            (!this.__query ? this.query() : this.__query).containedIn(col, array);
            return this;
          };
        
          Collection.prototype.notContainedIn = function(col, array) {
            (!this.__query ? this.query() : this.__query).notContainedIn(col, array);
            return this;
          };
        
          Collection.prototype.inQuery = function(col, query) {
            (!this.__query ? this.query() : this.__query).inQuery(col, query);
            return this;
          };
        
          Collection.prototype.notInQuery = function(col, query) {
            (!this.__query ? this.query() : this.__query).notInQuery(col, query);
            return this;
          };
        
          Collection.prototype.include = function(value) {
            if (!(value instanceof String)) {
              throw new Error("limit requires String value was {typeof value}");
            }
            return this.__params.include = "" + value;
          };
        
          Collection.prototype.keys = function(value) {
            if (!(value instanceof Array)) {
              throw new Error("keys requires Array value was {typeof value}");
            }
            return this.__params.keys = "" + value;
          };
        
          Collection.prototype.count = function(value) {
            if (!(value instanceof Boolean)) {
              throw new Error("count requires Boolean value was {typeof value}");
            }
            return this.__params.count = value || true;
          };
        
          Collection.prototype.order = function(value) {
            return this.__params.order = "" + value;
          };
        
          Collection.prototype.limit = function(value) {
            if (!(value instanceof Number)) {
              throw new Error("limit requires Number value was {typeof value}");
            }
            return this.__params.limit = value;
          };
        
          Collection.prototype.skip = function(value) {
            if (!(value instanceof Number)) {
              throw new Error("skip requires Number value was {typeof value}");
            }
            return this.__params.skip = value;
          };
        
          return Collection;
        
        })(Backbone.Collection);
        
        $scope.Collection.equalTo = function(col, value) {
          return (new this).equalTo(col, value);
        };
        
        $scope.Collection.notEqualTo = function(col, value) {
          return (new this).notEqualTo(col, value);
        };
        
        $scope.Collection.greaterThan = function(col, value) {
          return (new this).greaterThan(col, value);
        };
        
        $scope.Collection.greaterThanOrEqualTo = function(col, value) {
          return (new this).greaterThanOrEqualTo(col, value);
        };
        
        $scope.Collection.lessThan = function(col, value) {
          return (new this).lessThan(col, value);
        };
        
        $scope.Collection.lessThanOrEqualTo = function(col, value) {
          return (new this).lessThanOrEqualTo(col, value);
        };
        
        $scope.Collection.contains = function(col, value) {
          return (new this).contains(col, value);
        };
        
        $scope.Collection.containsAll = function(col, array) {
          return (new this).containsAll(col, array);
        };
        
        $scope.Collection.containedIn = function(col, array) {
          return (new this).containedIn(col, array);
        };
        
        $scope.Collection.notContainedIn = function(col, array) {
          return (new this).notContainedIn(col, array);
        };
        
        $scope.Collection.inQuery = function(col, query) {
          return (new this).inQuery(col, query);
        };
        
        $scope.Collection.notInQuery = function(col, query) {
          return (new this).notInQuery(col, query);
        };
        
        $scope.Collection.orQuery = function() {
          var queries;
          queries = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (new this).orQuery(queries);
        };
        
        $scope.Collection.include = function(value) {
          return (new this).include = value;
        };
        
        $scope.Collection.keys = function(array) {
          return (new this).keys = value;
        };
        
        $scope.Collection.count = function(bool) {
          return (new this).count = bool;
        };
        
        $scope.Collection.order = function(value) {
          return (new this).order = value;
        };
        
        $scope.Collection.limit = function(value) {
          return (new this).limit = value;
        };
        
        $scope.Collection.skip = function(value) {
          return (new this).skip = value;
        };
        
        $scope.Batch = (function(_super) {
          __extends(Batch, _super);
        
          function Batch(attrs, opts) {
            Batch.__super__.constructor.call(this, attrs, opts);
          }
        
          Batch.prototype.url = function() {
            return $scope.API_URI + "/batch";
          };
        
          Batch.prototype.__processed = [];
        
          Batch.prototype.processed = function(flatten) {
            if (flatten == null) {
              flatten = true;
            }
            if (flatten) {
              return _.flatten(this.__processed);
            } else {
              return this.__processed;
            }
          };
        
          Batch.prototype.toJSON = function(options) {
            return JSON.stringify({
              requests: Batch.__super__.toJSON.call(this, options)
            });
          };
        
          Batch.prototype._memberIsNew = function(attrs) {
            return (attrs.hasOwnProperty('isNew') && attrs.isNew()) || (typeof (attrs.get('objectId')) === 'undefined' || attrs.get('objectId' === null || attrs.get('objectId' === "")));
          };
        
          Batch.prototype._prepareModel = function(attrs, options) {
            var obj;
            if (options == null) {
              options = {};
            }
            if (!(options.hasOwnProperty('destroy'))) {
              options = _.extend(options, {
                destroy: false
              });
            }
            if (options.destroy && this._memberIsNew(attrs)) {
              obj = null;
            } else {
              obj = {
                method: $scope.CRUD_METHODS[options.destroy ? 'destroy' : (this._memberIsNew(attrs) ? 'create' : 'update')],
                path: "/" + $scope.API_VERSION + "/classes/" + attrs.className + (!this._memberIsNew(attrs) ? '/' + attrs.get('objectId') : '')
              };
              if (!options.destroy) {
                obj.body = attrs;
              }
            }
            return Batch.__super__._prepareModel.call(this, obj, options);
          };
        
          Batch.prototype.sync = function(method, model, options) {
            var opts;
            if (options == null) {
              options = {};
            }
            if (!model.models || model.models.length === 0) {
              return;
            }
            opts = $scope.apiOPTS();
            opts.data = JSON.stringify({
              requests: (this.__to_remove = model.slice(0, ($scope.MAX_BATCH_SIZE >= 0 && $scope.MAX_BATCH_SIZE < model.models.length ? $scope.MAX_BATCH_SIZE : model.models.length)))
            });
            opts.success = (function(_this) {
              return function(m, r, o) {
                _this.__processed.push(_.map(m, function(v, k, l) {
                  return _.chain(_this.__to_remove[k].get('body')).tap(function(_o) {
                    if (typeof _o !== 'undefined') {
                      return _o.set(v.success);
                    } else {
                      return _o = v.success;
                    }
                  }).value();
                }));
                _this.remove(_this.__to_remove, {
                  index: 0,
                  silent: true
                });
                setTimeout((function() {
                  if (model.models.length > 0) {
                    return _this.sync(method, _this, options);
                  } else {
                    return typeof options.complete === "function" ? options.complete(_this.__processed, r, o) : void 0;
                  }
                }), 200);
                return typeof options.success === "function" ? options.success(m, r, o) : void 0;
              };
            })(this);
            opts.error = (function(_this) {
              return function(m, r, o) {
                return typeof options.error === "function" ? options.error(m, r, o) : void 0;
              };
            })(this);
            opts.complete = (function(_this) {
              return function(m, r, o) {
                return typeof options.completed === "function" ? options.completed(m, r, o) : void 0;
              };
            })(this);
            return Backbone.sync(method, model, _.extend(_.clone(options), opts));
          };
        
          Batch.prototype.fetch = function(options) {
            return console.warn("Method 'fetch' is not supported by " + namespace + ".Batch. Use " + namespace + ".Collection instead");
          };
        
          Batch.prototype.exec = function(options) {
            return this.sync('create', this, options);
          };
        
          Batch.prototype.destroy = function(models, options) {
            return this.add(models, _.extend(_.clone(options || {}), {
              destroy: true
            }));
          };
        
          Batch.prototype.save = function(models, options) {
            return this.add(models, options);
          };
        
          return Batch;
        
        })($scope.Collection);
        
        $scope.User = (function(_super) {
          __extends(User, _super);
        
          function User() {
            return User.__super__.constructor.apply(this, arguments);
          }
        
          User.prototype.defaults = {
            email: null,
            password: null,
            password_confirmation: null
          };
        
          User.prototype.__action = 'operate';
        
          User.prototype.urlMap = {
            create: $scope.API_URI + "/users",
            login: $scope.API_URI + "/login",
            passwordReset: $scope.API_URI + "/requestPasswordReset",
            operate: $scope.API_URI + "/users"
          };
        
          User.prototype.signUp = function(attrs, options) {
            return this.save(attrs || null, options);
          };
        
          User.prototype.logIn = function(username, password, options) {
            var opts;
            this.__action = 'login';
            (opts = {}).success = (function(_this) {
              return function(m, r, o) {
                $scope.SESSION_TOKEN = _this.get('sessionToken');
                delete _this.attributes.sessionToken;
                if (options.success) {
                  return options.success(m, r, o);
                }
              };
            })(this);
            return User.__super__.save.call(this, {
              username: username,
              password: password
            }, _.extend(_.clone(options), opts));
          };
        
          User.prototype.restore = function(token, options) {
            var opts;
            if (options == null) {
              options = {};
            }
            this.urlMap['login'] = encodeURI(this.urlMap['login'] + "/" + token);
            (opts = {}).success = (function(_this) {
              return function(m, r, o) {
                var _ref;
                $scope.SESSION_TOKEN = _this.get('sessionToken');
                delete _this.attributes.sessionToken;
                return (_ref = options.success) != null ? _ref.apply(_this, arguments) : void 0;
              };
            })(this);
            return this.fetch(_.extend(_.clone(options), opts));
          };
        
          User.prototype.logOut = function(options) {
            var opts, success;
            if (options == null) {
              options = {};
            }
            opts = success = (function(_this) {
              return function() {
                var _ref;
                $scope.SESSION_TOKEN = void 0;
                _this.id = null;
                _this.set(_this.defaults);
                return (_ref = options.success) != null ? _ref.apply(_this, arguments) : void 0;
              };
            })(this);
            return this.destroy;
          };
        
          User.prototype.resetPassword = function(options) {
            var email;
            if ((email = this.get('email')) === null) {
              return false;
            }
            this.__action = 'passwordReset';
            return User.__super__.save.call(this, {
              email: email
            }, options);
          };
        
          User.prototype.save = function(attrs, opts) {
            this.__action = (this.isNew() ? 'create' : 'operate');
            return User.__super__.save.call(this, attrs, opts);
          };
        
          User.prototype.destroy = function(options) {
            var opts;
            this.__action = 'operate';
            (opts = {}).success = (function(_this) {
              return function(m, r, o) {
                _this.logOut();
                if (options.success) {
                  return options.success(m, r, o);
                }
              };
            })(this);
            return User.__super__.destroy.call(this, _.extend(_.clone(options), opts));
          };
        
          return User;
        
        })($scope.Object);
        
        $scope.Users = (function(_super) {
          __extends(Users, _super);
        
          function Users() {
            return Users.__super__.constructor.apply(this, arguments);
          }
        
          Users.prototype.url = function() {
            return $scope.API_URI + "/users";
          };
        
          return Users;
        
        })($scope.Collection);
        
        $scope.Login = (function(_super) {
          __extends(Login, _super);
        
          Login.prototype.idAttribute = 'token';
        
          Login.prototype.defaults = {
            email: String,
            password: String
          };
        
          function Login() {
            Login.__super__.constructor.apply(this, arguments);
            this.className = "login";
          }
        
          Login.prototype.validate = function(o) {
            var email, password, token;
            email = o.email || this.attributes.email || null;
            password = o.token || this.attributes.password || null;
            token = o.token || this.attributes.token || null;
            if (email != null) {
              if (password == null) {
                return "password required";
              }
              if (token != null) {
                return "password required";
              }
            }
            if (token != null) {
              if (email != null) {
                return "token based authentication does not use email address";
              }
              if (password != null) {
                return "token based authentication does not use password";
              }
            }
          };
        
          Login.prototype.login = function(email, password, options) {
            return this.save({
              email: email,
              password: password
            }, options);
          };
        
          Login.prototype.logout = function(options) {
            return this.destroy();
          };
        
          Login.prototype.restore = function(token, options) {
            return this.fetch({
              token: token
            }, options);
          };
        
          Login.prototype.isAuthenticated = function() {
            return this.attributes[this.idAttribute] != null;
          };
        
          return Login;
        
        })($scope.Object);
        
        $scope.Auth = (function(_super) {
          __extends(Auth, _super);
        
          Auth.prototype.idAttribute = 'session_id';
        
          function Auth(token) {
            var login, user;
            user = new $scope.User;
            login = null;
            if (token == null) {
              token = null;
            }
            this.isAuthenticated = (function(_this) {
              return function() {
                var _ref;
                return ((_ref = _this.attributes) != null ? _ref[_this.idAttribute] : void 0) != null;
              };
            })(this);
            this.login = (function(_this) {
              return function(username, password, options) {
                return (login != null ? login : login = new $scope.Login).login(username, password, _this.createOptions(options));
              };
            })(this);
            this.logout = (function(_this) {
              return function(options) {
                return (login != null ? login : login = new $scope.Login({
                  token: token
                })).logout(arguments);
              };
            })(this);
            this.restore = (function(_this) {
              return function(token, options) {
                return (login != null ? login : login = new $scope.Login({
                  token: token
                })).restore(token, _this.createOptions(options));
              };
            })(this);
            this.getUser = (function(_this) {
              return function() {
                return user.attributes;
              };
            })(this);
            this.setUser = (function(_this) {
              return function(attributes, options) {
                return user.set(attributes, _this.createOptions(options));
              };
            })(this);
            this.saveUser = (function(_this) {
              return function(attributes, options) {
                return user.save(attributes, _this.createOptions(options));
              };
            })(this);
            this.registerUser = (function(_this) {
              return function(attributes, options) {
                return _this.saveUser(attributes, _this.createOptions(options));
              };
            })(this);
            if (token != null) {
              this.restore(token);
            }
          }
        
          return Auth;
        
        })($scope.Object);
        
        $scope.VirtualType = (function(_super) {
          __extends(VirtualType, _super);
        
          VirtualType.prototype.getters = [];
        
          VirtualType.prototype.setters = [];
        
          function VirtualType(options, name) {
            if (name) {
              this.path = name;
            } else {
              throw "param 'name' must be defined";
            }
            this.options = options || {};
          }
        
          VirtualType.prototype.get = function(fn) {
            this.getters.push(fn);
            return this;
          };
        
          VirtualType.prototype.set = function(fn) {
            this.setters.push(fn);
            return this;
          };
        
          VirtualType.prototype.applyGetters = function(value, scope) {
            var idx, v, _i, _ref;
            v = value;
            for (idx = _i = _ref = this.getters.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; idx = _ref <= 0 ? ++_i : --_i) {
              if (idx === -1) {
                break;
              }
              v = this.getters[idx].call(scope, v, this);
            }
            return v;
          };
        
          VirtualType.prototype.applySetters = function(value, scope) {
            var idx, v, _i, _ref;
            v = value;
            for (idx = _i = _ref = this.setters.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; idx = _ref <= 0 ? ++_i : --_i) {
              if (idx === -1) {
                break;
              }
              v = this.setters[idx].call(scope, v, this);
            }
            return v;
          };
        
          return VirtualType;
        
        })(Object);
        
        $scope.Router = (function(_super) {
          __extends(Router, _super);
        
          function Router() {
            var _router;
            _router = new Backbone.Router;
            $scope.Router.prototype.routes = (function(_this) {
              return function(r) {
                return _router.routes(r);
              };
            })(this);
            $scope.Router.prototype.route = (function(_this) {
              return function(r, n, cB) {
                return _router.route(r, n, cB);
              };
            })(this);
            $scope.Router.prototype.navigate = (function(_this) {
              return function(p, opts) {
                return _router.navigate(p, opts);
              };
            })(this);
            $scope.Router.prototype.execute = (function(_this) {
              return function(cB, args) {
                return _router.execute(cB, args);
              };
            })(this);
          }
        
          return Router;
        
        })($scope.Singleton);
        
        $scope.Router.getInstance = (function(_this) {
          return function() {
            return _this.__instance != null ? _this.__instance : _this.__instance = new $scope.Router();
          };
        })(this);
        
        $scope.Types = {
          Array: Array,
          Buffer: ArrayBuffer,
          Date: Date,
          Number: Number,
          String: String
        };
        
        $scope.SchemaItem = (function() {
          function SchemaItem(_at_path, obj) {
            var key, type, _ref;
            this.path = _at_path;
            if (obj == null) {
              obj = {};
            }
            this.index = false;
            this.instance = void 0;
            this["default"] = null;
            this.validators = [];
            this.getter = null;
            this.setter = null;
            this.options = {};
            this.required = false;
            _ref = $scope.Types;
            for (key in _ref) {
              type = _ref[key];
              if (type === obj) {
                this.instance = obj;
                return;
              }
            }
            obj = _.clone(obj);
            if (obj.get) {
              this.get(obj.get);
            }
            if (obj.set) {
              this.set(obj.set);
            }
            if (obj.type) {
              this.instance = obj.type;
              delete obj.type;
            }
            if (obj && typeof obj === 'object') {
              _.each((_.partial(_.without, _.keys(obj))).apply(this, $scope.SchemaItem.allowed), (function(_this) {
                return function(v) {
                  return delete obj[v];
                };
              })(this));
            }
            if (obj.validators) {
              this.validators.push(obj.validators);
              delete obj.validators;
            }
            _.extend(this, obj);
          }
        
          SchemaItem.prototype.getDefault = function() {
            if (!this.hasDefault()) {
              return null;
            }
            if (typeof this["default"] === 'function') {
              return this["default"]();
            } else {
              return this["default"];
            }
          };
        
          SchemaItem.prototype.hasDefault = function() {
            return this["default"] != null;
          };
        
          SchemaItem.prototype.get = function(fun) {
            if (typeof fun === 'function') {
              return this.getter = fun;
            } else {
              throw "SchemaItem::get requires param to be type 'Function'. Type was " + (typeof fun);
            }
          };
        
          SchemaItem.prototype.set = function(fun) {
            if (typeof fun === 'function') {
              return this.setter = fun;
            } else {
              throw "SchemaItem::set requires param to be type 'Function'. Type was " + (typeof fun);
            }
          };
        
          SchemaItem.prototype.validate = function(validator) {
            switch (typeof validator) {
              case 'Function':
                return this.validators.push([validator, this.path + " was invalid"]);
              case 'Array':
                if (!validator.length) {
                  throw "Validator for " + path + " was malformed";
                }
                if (validator.length === 1) {
                  validator.push(this.path + " was invalid");
                }
                return this.validators.push(validator);
              default:
                throw "Validator requires either Function or Array type was '" + (typeof validator) + "'";
            }
          };
        
          return SchemaItem;
        
        })();
        
        $scope.SchemaItem.allowed = "index,default,validators,options,required".split(',');
        
        $scope.Schema = (function(_super) {
          __extends(Schema, _super);
        
          Schema.prototype.add = function(obj, prefix) {
            if (prefix == null) {
              prefix = '';
            }
            return _.each(_.keys(obj), (function(_this) {
              return function(key, k) {
                var pK, subKeys, value;
                pK = "" + prefix + key;
                if (key === null) {
                  throw "Invalid value for Schema Path " + pK;
                }
                if (_.isObject(value = obj[key]) && (value.constructor || value.constructor.name === 'Object') && !value.type) {
                  if ((subKeys = _.keys(value)).length) {
                    return _.each(subKeys, function(subValue, subKey) {
                      if (0 <= $scope.SchemaItem.allowed.indexOf(subKey)) {
                        _this.nested[pK] = true;
                        return _this.add(value, pK + ".");
                      } else {
                        return _this.path(pK, subValue);
                      }
                    });
                  } else {
                    if (value != null) {
                      return _this.path(pK, value);
                    }
                  }
                } else {
                  return _this.path(pK, value);
                }
              };
            })(this));
          };
        
          Schema.prototype.path = function(path, obj) {
            this.paths[path] = new $scope.SchemaItem(path, obj);
            return this;
          };
        
          Schema.prototype.pathType = function(path) {
            if (__indexOf.call(this.paths, path) >= 0) {
              return 'real';
            }
            if (__indexOf.call(this.virtuals, path) >= 0) {
              return 'virtual';
            }
            if (__indexOf.call(this.nested, path) >= 0) {
              return 'nested';
            }
            if (__indexOf.call(this.subpaths, path) >= 0) {
              return 'real';
            }
            if (/\.\d+\.|\.\d+$/.test(path) && this.getPositionalPath(this, path)) {
              return 'real';
            } else {
              return 'adhocOrUndefined';
            }
          };
        
          Schema.prototype.virtual = function(name, options) {
            return this.virtuals[name] = name.split('.').reduce((function(mem, part, i, arr) {
              return mem[part] || (mem[part] = i === arr.length - 1 ? new $scope.VirtualType(options, name) : {});
            }), this.tree);
          };
        
          Schema.prototype.virtualpath = function(name) {
            return this.virtuals[name];
          };
        
          function Schema(obj, _at_options) {
            var o;
            this.options = _at_options != null ? _at_options : {};
            this.paths = {};
            this.subpaths = {};
            this.nested = {};
            this.virtuals = {};
            this.statics = {};
            this.subpaths = {};
            this.tree = {};
            this.options = {};
            this.methods = {};
            this.inherits = {};
            if ($scope.isOfType(obj, $scope.Schema)) {
              _.extend(this, obj);
            } else {
              if ((o = _.clone(obj)) != null) {
                _.each(['subpaths', 'virtuals', 'nested', 'inherits', '_indexes', 'methods', 'statics', 'tree', 'options'], function(key) {
                  if (o.hasOwnProperty(key)) {
                    this[key] = o[key];
                    return delete o[key];
                  }
                });
                if (o != null) {
                  this.add(o);
                }
              }
            }
          }
        
          Schema.prototype.get = function(key) {
            if (0 > _.keys($scope.Schema.reserved).indexOf(key)) {
              return this[key];
            } else {
              return null;
            }
          };
        
          Schema.prototype.set = function(key, val, _tags) {
            if (_.keys($scope.Schema.reserved).indexOf(key === -1)) {
              return this[key] = val;
            }
          };
        
          Schema.prototype.validate = function(path, validator) {
            var p;
            if ((p = this.paths[path]) != null) {
              return p.validate(validator);
            } else {
              throw "Schema path '" + path + "' does not exist";
            }
          };
        
          return Schema;
        
        })(Object);
        
        $scope.Schema.reserved = _.object(_.map("on,db,set,get,init,isNew,errors,schema,options,modelName,collection,toObject,emit,_events,_pres,_posts".split(','), function(v) {
          return [v, 1];
        }));
        
        $scope.SchemaLoader = (function(_super) {
          __extends(SchemaLoader, _super);
        
          function SchemaLoader(opts) {
            if (opts == null) {
              opts = {};
            }
            if (opts.schema != null) {
              delete opts.schema;
            }
            this.schema = {
              '__meta__': Object,
              '__schemas__': Object
            };
            SchemaLoader.__super__.constructor.call(this, void 0, opts);
          }
        
          SchemaLoader.prototype.url = function() {
            return ($scope.getAPIUrl()) + "/__schema__";
          };
        
          SchemaLoader.prototype.get = function(attr) {
            return SchemaLoader.__super__.constructor.__super__.get.call(this, attr);
          };
        
          SchemaLoader.prototype.fetch = function(opts) {
            var params;
            if (opts == null) {
              opts = {};
            }
            params = {
              success: (function(_this) {
                return function(m, r, o) {
                  var keys, schemas;
                  return _.each(keys = _.keys(schemas = _this.get('__schemas__') || {}), function(v, k) {
                    $scope.createSchema(v, schemas[v]);
                    if (k === _.keys(keys).length - 1) {
                      return typeof opts.success === "function" ? opts.success() : void 0;
                    }
                  });
                };
              })(this),
              error: (function(_this) {
                return function(m, r, o) {
                  return typeof opts.error === "function" ? opts.error(m, r, o) : void 0;
                };
              })(this)
            };
            return SchemaLoader.__super__.fetch.call(this, _.extend(_.clone(opts), params));
          };
        
          SchemaLoader.prototype.parse = function(response, opts) {
            return SchemaLoader.__super__.parse.call(this, JSON.parse(opts.xhr.responseText, SchemaLoader.reviver), opts);
          };
        
          SchemaLoader.prototype.save = function() {};
        
          SchemaLoader.prototype.destroy = function() {};
        
          return SchemaLoader;
        
        })($scope.Object);
        
        $scope.SchemaLoader.reviver = function(key, value) {
          var fun;
          if (0 <= _.keys($scope.Schema.reserved).indexOf(key)) {
            return void 0;
          }
          if (typeof value === 'string' && ((fun = $scope.Function.fromString(value)) != null)) {
            return fun;
          } else {
            return value;
          }
        };
        
        $scope.Query = (function() {
          Query.prototype.__q = {};
        
          Query.prototype.__include = [];
        
          Query.prototype.__limit = -1;
        
          Query.prototype.__skip = 0;
        
          Query.prototype.__extraOpts = {};
        
          function Query(classOrName) {
            if (classOrName != null) {
              this.objectClass = _.isString(classOrName) ? $scope.Object._getSubclass(classOrName) : classOrName;
              this.className = this.objectClass.className || $scope.getConstructorName(this.objectClass);
            }
            this.or = this._or;
            this["in"] = this._in;
            this.clear();
          }
        
          Query.prototype.clear = function() {
            return this.__q = {};
          };
        
          Query.prototype.find = function(opts) {
            if (opts == null) {
              opts = {};
            }
            if (typeof this.objectClass !== 'function') {
              throw 'valid Class required';
            }
            return (new this.objectClass).sync($scope.CRUD_METHODS.read, [], _.extend(opts, {
              where: this.__q
            })).then((function(_this) {
              return function(s, r, o) {
                return _.each(r.results, function(v, k) {
                  var obj;
                  (obj = v.className ? new $scope.Object(v.className) : new _this.objectClass)._finishFetch(v, true);
                  return obj;
                });
              };
            })(this));
          };
        
          Query.prototype.first = function(opts) {
            if (opts == null) {
              opts = {};
            }
            return this.find(_.extend(opts, {
              skip: 0,
              limit: 1
            }));
          };
        
          Query.prototype.set = function(col, key, val) {
            var _base;
            if (col != null) {
              if ((_base = this.__q)[col] == null) {
                _base[col] = {};
              }
            }
            (this.__q[col] || this.__q)[key] = val;
            return this;
          };
        
          Query.prototype.getParams = function() {
            return (_.map(_.pairs(this.__q, (function(_this) {
              return function(v, k) {
                return v.join('=');
              };
            })(this)))).join('&');
          };
        
          Query.prototype.toJSON = function() {
            return this.__q;
          };
        
          Query.prototype.toString = function() {
            return JSON.stringify(this.toJSON());
          };
        
          Query.prototype.equalTo = function(col, value) {
            return this.set(null, col, value);
          };
        
          Query.prototype.notEqualTo = function(col, value) {
            return this.set(col, '$ne', value);
          };
        
          Query.prototype.dontSelect = function(query) {
            return this.set(null, '$dontSelect', {
              query: query
            });
          };
        
          Query.prototype.exists = function(col) {
            return this.set(col, '$exists', true);
          };
        
          Query.prototype.doesNotExist = function(col) {
            return this.set(col, '$exists', false);
          };
        
          Query.prototype.greaterThan = function(col, val) {
            return this.set(col, '$gt', val);
          };
        
          Query.prototype.greaterThanOrEqualTo = function(col, val) {
            return this.set(col, '$gte', val);
          };
        
          Query.prototype.lessThan = function(col, value) {
            return this.set(col, '$lt', value);
          };
        
          Query.prototype.lessThanOrEqualTo = function(col, value) {
            return this.set(col, '$lte', value);
          };
        
          Query.prototype.contains = function(col, val) {
            return this.set(col, '$regex', val);
          };
        
          Query.prototype.containsAll = function(col, array) {
            return this.set(null, '$all');
          };
        
          Query.prototype.containedIn = function(col, value) {
            return this.set(col, '$in', array);
          };
        
          Query.prototype.notContainedIn = function(col, array) {
            return this.set(col, '$nin', array);
          };
        
          Query.prototype.select = function(col, query) {
            return this.set(col, '$select', {
              query: query
            });
          };
        
          Query.prototype.inQuery = function(col, query) {
            return this.set(col, '$inQuery', {
              where: query
            });
          };
        
          Query.prototype.notInQuery = function(col, query) {
            return this.set(col, '$notInQuery', {
              where: query
            });
          };
        
          Query.prototype._or = function() {
            var queries, _base;
            queries = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return this.__q['$or'] = ((_base = this.__q)['$or'] != null ? _base['$or'] : _base['$or'] = []).concat($scope.Query.or(queries));
          };
        
          Query.prototype.relatedTo = function(object, key) {
            if (!((object instanceof $scope.Object) && (object.className != null))) {
              throw new Error(namespace + ".Query.$relatedTo required object be of Type " + namespace + ".Object");
            }
            return this.set(null, "$relatedTo", {
              object: {
                __type: "Pointer",
                objectId: object.get('objectId'),
                className: object.className
              },
              key: "" + key
            });
          };
        
          Query.prototype.include = function(value) {
            return this.set(null, 'include', "" + value);
          };
        
          Query.prototype.keys = function(val) {
            return this.set(null, 'keys', "" + value);
          };
        
          Query.prototype.count = function(value) {
            return this.set(null, 'count', "" + value);
          };
        
          Query.prototype.order = function(value) {
            return this.set(null, 'order', "" + value);
          };
        
          Query.prototype.limit = function(value) {
            return this.set(null, 'limit', "" + value);
          };
        
          Query.prototype.skip = function(value) {
            return this.set(null, 'skip', "" + value);
          };
        
          Query.prototype.arrayKey = function(col, value) {
            return this.set(null, col, "" + value);
          };
        
          return Query;
        
        })();
        
        $scope.Query.or = function() {
          var className, queries;
          queries = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          className = null;
          _.each(queries, (function(_this) {
            return function(q) {
              if ((className != null ? className : className = q.className) !== q.className) {
                throw "All queries must be of the same class";
              }
            };
          })(this));
          return _.map(_.flatten(queries), function(v, k) {
            if (v.query != null) {
              return v.query().__q;
            } else {
              return v;
            }
          });
        };
        
        $scope.Query._quote = function(s) {
          return "\\Q" + s + "\\E";
        };
        
        return $scope;
      };
      return app = {
        createScope: function(ns, schema) {
          if (schema == null) {
            schema = {};
          }
          if (global[ns]) {
            return global[ns];
          }
          return _.extend(new _appLayer(ns), {
            namespace: ns,
            schema: schema
          });
        },
        initialize: function(opts, callback) {
          if (opts == null) {
            opts = {};
          }
          return _.each(opts, (function(_this) {
            return function(value, key) {
              key = key.toUpperCase();
              if (0 <= _this.ALLOWED.indexOf(key)) {
                return _this[key] = value;
              } else {
                throw "option: '" + key + "' was not settable";
              }
            };
          })(this));
        }
      };
    })();
  }

}).call(this);
