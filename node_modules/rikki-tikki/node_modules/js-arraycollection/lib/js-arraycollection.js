// Generated by CoffeeScript 1.7.1
var Events, eventSplitter, eventsApi, global, triggerEvents, _;

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (typeof exports !== 'undefined') {
  _ = require('underscore')._;
}

'use strict';

Events = {
  on: function(name, callback, context) {
    var events;
    if (!eventsApi(this, 'on', name, [callback, context]) || !callback) {
      return this;
    }
    this._events || (this._events = {});
    events = this._events[name] || (this._events[name] = []);
    events.push({
      callback: callback,
      context: context,
      ctx: context || this
    });
    return this;
  },
  off: function(name, callback, context) {
    var names;
    if (!this._events || !eventsApi(this, 'off', name, [callback, context])) {
      return this;
    }
    if (!name && !callback && !context) {
      this._events = {};
      return this;
    }
    names = name ? [name] : _.keys(this._events);
    _.each(names, (function(_this) {
      return function(v, i) {
        var events, k, retain;
        name = names[i];
        if ((events = _this._events[name])) {
          _this._events[name] = retain = [];
          if (callback || context) {
            k = events.length;
            _.each(events, function(v, j) {
              var ev;
              if ((callback && callback !== (ev = events[j]).callback && callback !== ev.callback._callback) || (context && context !== ev.context)) {
                return retain.push(ev);
              }
            });
          }
          if (!retain.length) {
            return delete _this._events[name];
          }
        }
      };
    })(this));
    return this;
  },
  trigger: function(name) {
    var allEvents, args, events;
    if (!this._events) {
      return this;
    }
    args = [].slice.call(arguments, 1);
    if (!eventsApi(this, 'trigger', name, args)) {
      return this;
    }
    events = this._events[name];
    allEvents = this._events.all;
    if (events) {
      triggerEvents(events, args);
    }
    if (allEvents) {
      triggerEvents(allEvents, arguments);
    }
    return this;
  }
};

eventSplitter = /\s+/;

eventsApi = function(obj, action, name, rest) {
  var names;
  if (!name) {
    return true;
  }
  if (typeof name === 'object') {
    _.each(name, (function(_this) {
      return function(v, key) {
        return obj[action].apply(obj, [key, name[key]].concat(rest));
      };
    })(this));
    return false;
  }
  if (eventSplitter.test(name)) {
    names = name.split(eventSplitter);
    _.each(names, (function(_this) {
      return function(v, i) {
        return obj[action].apply(obj, [names[i]].concat(rest));
      };
    })(this));
    return false;
  }
  return true;
};

triggerEvents = function(events, args) {
  var a1, a2, a3, ev, i, l, _results;
  i = -1;
  l = events.length;
  a1 = args[0];
  a2 = args[1];
  a3 = args[2];
  switch (args.length) {
    case 0:
      while (++i < l) {
        (ev = events[i]).callback.call(ev.ctx);
      }
      break;
    case 1:
      while (++i < l) {
        (ev = events[i]).callback.call(ev.ctx, a1);
      }
      break;
    case 2:
      while (++i < l) {
        (ev = events[i]).callback.call(ev.ctx, a1, a2);
      }
      break;
    case 3:
      while (++i < l) {
        (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
      }
      break;
    default:
      _results = [];
      while (++i < l) {
        _results.push((ev = events[i]).callback.apply(ev.ctx, args));
      }
      return _results;
  }
};

Events.bind = Events.on;

Events.unbind = Events.off;

global.ArrayCollection = (function() {
  ArrayCollection.prototype.__updated = false;

  ArrayCollection.prototype.__list = [];

  ArrayCollection.prototype.__callbacks = [];

  ArrayCollection.prototype.__serial = '';

  ArrayCollection.prototype.__serialize = function(o) {
    return _.map(o, function(v, k) {
      return _.map(_.pairs(v), function(v1, k1) {
        return v1.join(':');
      });
    });
  };

  function ArrayCollection(source) {
    _.extend(this, Events);
    if (source != null) {
      this.setSource(source);
    }
    setInterval(((function(_this) {
      return function() {
        var sList, updates;
        updates = [];
        if (_this.__serial !== (sList = _this.__serialize(_this.__list))) {
          _.each(_this.__serial, function(v, k) {
            var diff;
            if ((diff = _.difference(v, sList[k])).length) {
              return _.each(diff, function(dV, dK) {
                var prop;
                return updates.push(_this.itemUpdated(_this.__list[k], (prop = dV.split(':'))[0], prop[1], _this.__list[k][prop[0]]));
              });
            }
          });
          if (updates.length) {
            _this.collectionChanged('update', updates);
          }
        }
        _this.__serial = _this.__serialize(_this.__list);
        return updates = [];
      };
    })(this)), 200);
  }

  ArrayCollection.prototype.length = function() {
    return this.__list.length;
  };

  ArrayCollection.prototype.setSource = function(source) {
    if (source != null) {
      return this.addAll(source);
    }
  };

  ArrayCollection.prototype.clearSource = function() {
    return this.removeAll();
  };

  ArrayCollection.prototype.addAll = function(list) {
    return this.addAllAt(list, this.__list.length);
  };

  ArrayCollection.prototype.addAllAt = function(list, idx) {
    var added, cat, l, last;
    last = (l = _.clone(this.__list)).splice(idx, l.length);
    cat = _.partial((function(a2, a3, a1) {
      return _.compact([].concat(a1, a2, a3));
    }), (added = _.clone(list)), last);
    this.__list = l.length ? cat(l) : cat();
    return this.collectionChanged('added', added);
  };

  ArrayCollection.prototype.addItem = function(itm) {
    return this.addItemAt(itm, this.__list.length);
  };

  ArrayCollection.prototype.addItemAt = function(itm, idx) {
    return this.addAllAt(itm, idx);
  };

  ArrayCollection.prototype.contains = function(itm) {
    return _.contains(this.__list, itm);
  };

  ArrayCollection.prototype.getItemAt = function(idx) {
    return this.__list[idx] || null;
  };

  ArrayCollection.prototype.getItemIndex = function(itm) {
    return this.__list.indexOf(itm);
  };

  ArrayCollection.prototype.collectionChanged = function(operation, items) {
    var data;
    data = {};
    data[operation] = items;
    this.__updated = true;
    this.__serial = this.__serialize(this.__list);
    return this.trigger('collectionChanged', data);
  };

  ArrayCollection.prototype.itemUpdated = function(o, p, oV, nV) {
    return {
      item: o,
      prop: p,
      oldValue: oV,
      newValue: nV
    };
  };

  ArrayCollection.prototype.removeAll = function() {
    var l;
    l = this.__list.splice(0, this.__list.length);
    return this.collectionChanged('reset', l);
  };

  ArrayCollection.prototype.removeItemAt = function(idx) {
    if (this.__list.length >= idx) {
      return this.collectionChanged('removed', this.__list.splice(idx, 1));
    }
  };

  ArrayCollection.prototype.setItemAt = function(itm, idx) {
    var r;
    r = null;
    if (this.__list.length >= idx) {
      r = this.__list.splice(idx, 1);
    }
    this.__list.splice(idx, 1, itm);
    return this.collectionChanged('replaced', r);
  };

  return ArrayCollection;

})();
