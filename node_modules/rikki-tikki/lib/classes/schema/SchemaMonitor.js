// Generated by CoffeeScript 1.9.0
var RikkiTikkiAPI, SchemaMonitor, Util, fs, path, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('underscore')._;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI || module.parent.exports;

Util = RikkiTikkiAPI.Util;

SchemaMonitor = (function(_super) {
  __extends(SchemaMonitor, _super);

  SchemaMonitor.prototype.__exclude = [/^(_+.*|\.+\.?)$/];

  function SchemaMonitor() {
    Util.File.ensureDirExists(this.__path = "" + (RikkiTikkiAPI.getOptions().get('schema_path')));
    SchemaMonitor.__super__.constructor.call(this);
    setTimeout(((function(_this) {
      return function() {
        var _initialized;
        if (!_initialized) {
          _initialized = true;
          return _this.emit('init', {
            '0': {
              'added': _this.getCollection()
            }
          });
        }
      };
    })(this)), 600);
  }

  SchemaMonitor.prototype.refresh = function(callback) {
    var ex;
    ex = [];
    return RikkiTikkiAPI.getSchemaManager().listSchemas((function(_this) {
      return function(e, names) {
        var list;
        list = _.compact(_.map(names, function(v) {
          var stats, _path;
          if (!fs.existsSync(_path = "" + _this.__path + path.sep + v + ".js")) {
            _this.__collection.removeItemAt(_this.getNames().indexOf(v));
            return null;
          }
          if ((_this.filter(v)) && ((stats = fs.statSync(_path)) != null)) {
            return {
              name: v,
              updated: new Date(stats.mtime).getTime()
            };
          }
        }));
        if (list.length > 0) {
          _.each(list, function(value) {
            var idx;
            if (0 <= (idx = _this.getNames().indexOf(value.name))) {
              ex.push(value);
              if (_this.__collection.getItemAt(idx).updated !== value.updated) {
                return _this.__collection.setItemAt(value, idx);
              }
            }
          });
          if ((list = _.difference(list, ex)).length) {
            _this.__collection.addAll(list);
          }
        }
        return typeof callback === "function" ? callback(e, list) : void 0;
      };
    })(this));
  };

  SchemaMonitor.prototype.startPolling = function() {
    return this.__iVal != null ? this.__iVal : this.__iVal = fs.watch(this.__path, (function(_this) {
      return function(event, filename) {
        var e;
        try {
          return RikkiTikkiAPI.getSchemaManager().load();
        } catch (_error) {
          e = _error;
          return console.log(e);
        } finally {
          _this.refresh();
        }
      };
    })(this));
  };

  SchemaMonitor.prototype.stopPolling = function() {
    if (this.__iVal) {
      this.__iVal.close();
      return this.__iVal = null;
    }
  };

  return SchemaMonitor;

})(RikkiTikkiAPI.base_classes.AbstractMonitor);

module.exports = SchemaMonitor;
