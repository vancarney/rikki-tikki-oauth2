// Generated by CoffeeScript 1.9.0
var RikkiTikkiAPI, SchemaItem, Util, _;

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports;

Util = RikkiTikkiAPI.Util;

SchemaItem = (function() {
  function SchemaItem(_at_path, obj) {
    var key, type, _ref;
    this.path = _at_path;
    if (obj == null) {
      obj = {};
    }
    this.index = false;
    this.instance = void 0;
    this["default"] = null;
    this.validators = [];
    this.getter = null;
    this.setter = null;
    this.options = {};
    this.required = false;
    _ref = SchemaItem.Types;
    for (key in _ref) {
      type = _ref[key];
      if (type === obj) {
        this.instance = obj;
        return;
      }
    }
    obj = _.clone(obj);
    if (obj.get) {
      this.get(obj.get);
    }
    if (obj.set) {
      this.set(obj.set);
    }
    if (obj.type) {
      this.instance = obj.type;
      delete obj.type;
    }
    _.each((_.partial(_.without, _.keys(obj))).apply(this, SchemaItem.Allowed), (function(_this) {
      return function(v) {
        return delete obj[v];
      };
    })(this));
    if (obj.validators) {
      this.validators.push(obj.validators);
      delete obj.validators;
    }
    _.extend(this, obj);
  }

  SchemaItem.prototype.getDefault = function() {
    if (!this.hasDefault()) {
      return null;
    }
    if (typeof this["default"] === 'function') {
      return this["default"]();
    } else {
      return this["default"];
    }
  };

  SchemaItem.prototype.hasDefault = function() {
    return this["default"] != null;
  };

  SchemaItem.prototype.getAPIPath = function() {
    return "" + (RikkiTikkiAPI.getAPIPath()) + this.api_path;
  };

  SchemaItem.prototype.get = function(fun) {
    if (typeof fun === 'function') {
      return this.getter = fun;
    } else {
      throw "SchemaItem::get requires param to be type 'Function'. Type was " + (typeof fun);
    }
  };

  SchemaItem.prototype.set = function(fun) {
    if (typeof fun === 'function') {
      return this.setter = fun;
    } else {
      throw "SchemaItem::set requires param to be type 'Function'. Type was " + (typeof fun);
    }
  };

  SchemaItem.prototype.validate = function(validator) {
    switch (typeof validator) {
      case 'Function':
        return this.validators.push([validator, this.path + " was invalid"]);
      case 'Array':
        if (!validator.length) {
          throw "Validator for " + path + " was malformed";
        }
        if (validator.length === 1) {
          validator.push(this.path + " was invalid");
        }
        return this.validators.push(validator);
      default:
        throw "Validator requires either Function or Array type was '" + (typeof validator) + "'";
    }
  };

  return SchemaItem;

})();

SchemaItem.Types = {
  Array: Array,
  Buffer: ArrayBuffer,
  Mixed: Object,
  Date: Date,
  Number: Number,
  String: String
};

SchemaItem.Allowed = "index,default,validators,options,required,api_path".split(',');

module.exports = SchemaItem;
