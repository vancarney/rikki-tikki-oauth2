// Generated by CoffeeScript 1.9.0
var APISchema, Capabilities, RenderableSchema, RikkiTikkiAPI, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports;

module.exports = {};

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Capabilities = Util.getCapabilities();

RenderableSchema = require('./RenderableSchema');

APISchema = (function(_super) {
  __extends(APISchema, _super);

  function APISchema() {
    this.wrap_schema = RikkiTikkiAPI.getOptions().get('wrap_schema_exports');
    this.model_export = "module.exports = " + (Capabilities.mongooseLoaded() ? 'mongoose' : 'API') + ".model('<%=name%>', <%=name%>);";
    this.schema_export = "module.exports.<%=name%> = <%=name%>;";
    this.__template = "/*\n * <%=name%>.js\n * Schema Generated by RikkiTikki\n * Add custom Schema Validators, Types and Methods below\n */\nvar API = require('<%=api_path%>');\n" + (Capabilities.mongooseLoaded() ? "var mongoose = require('mongoose');" : "") + "\nvar <%=name%> = new " + (Capabilities.mongooseLoaded() ? 'mongoose.Schema' : 'API.Schema') + "(\n  API.extend(API.getSchemaTree('<%=name%>'),\n  {\n    // place custom Schema Type overrides here\n  })\n);\n\n/*\n * Virtual Getters/Setters\n */\n<%=name%>.virtuals = {\n  \n};\n\n/*\n * Static Methods\n */\n<%=name%>.statics = {\n  \n};\n\n/*\n * Custom Schema Validators\n */\n<%=name%>.validators = {\n  \n};\n\n" + (this.wrap_schema ? this.model_export : this.schema_export);
    APISchema.__super__.constructor.apply(this, arguments);
  }

  return APISchema;

})(RenderableSchema);

module.exports = APISchema;
