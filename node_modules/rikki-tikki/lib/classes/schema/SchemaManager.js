// Generated by CoffeeScript 1.9.0
var RenderableSchema, RikkiTikkiAPI, SchemaLoader, SchemaManager, Util, fs, path, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('underscore')._;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI || module.parent.exports;

Util = RikkiTikkiAPI.Util;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

SchemaLoader = require('./SchemaLoader');

RenderableSchema = require('./RenderableSchema');

SchemaManager = (function(_super) {
  __extends(SchemaManager, _super);

  SchemaManager.prototype.__meta = {};

  SchemaManager.prototype.__schemas = {};

  function SchemaManager() {
    this.load = __bind(this.load, this);
    SchemaManager.__super__.constructor.call(this);
    Util.File.ensureDirExists(this.__path = "" + (RikkiTikkiAPI.getOptions().get('schema_path')));
    this.load();
  }

  SchemaManager.prototype.load = function() {
    var e, file, n, stat, _i, _len, _ref, _results;
    try {
      stat = fs.statSync(this.__path);
    } catch (_error) {
      e = _error;
      this.emit.apply(this, ['error', e]);
    }
    if (stat != null ? stat.isDirectory() : void 0) {
      _ref = fs.readdirSync(this.__path);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.match(/^(_|\.)+/)) {
          continue;
        }
        _results.push((this.__schemas[n = Util.File.name(file)] = new SchemaLoader(n)).on('error', (function(_this) {
          return function(e) {
            return _this.emit('error', e);
          };
        })(this)));
      }
      return _results;
    }
  };

  SchemaManager.prototype.createSchema = function(name, data, callback) {
    if (data == null) {
      data = {};
    }
    if (typeof data === 'function') {
      callback = arguments[1];
      data = {};
    }
    return this.getSchema(name, (function(_this) {
      return function(e, schema) {
        if (schema == null) {
          return (_this.__schemas[name] = new SchemaLoader).create("" + name, data, callback);
        } else {
          return typeof callback === "function" ? callback(null, schema) : void 0;
        }
      };
    })(this));
  };

  SchemaManager.prototype.getSchema = function(name, callback) {
    var schema;
    if (this.__schemas == null) {
      this.__schemas = {};
    }
    if ((schema = this.__schemas[name]) != null) {
      return typeof callback === "function" ? callback(null, schema) : void 0;
    } else {
      return typeof callback === "function" ? callback("Schema '" + name + "' was not found", null) : void 0;
    }
  };

  SchemaManager.prototype.reloadSchema = function(name, callback) {
    return this.getSchema(name, (function(_this) {
      return function(e, schema) {
        if (!schema) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        } else {
          return schema.reload(callback);
        }
      };
    })(this));
  };

  SchemaManager.prototype.listSchemas = function(callback) {
    return typeof callback === "function" ? callback(null, _.keys(this.__schemas)) : void 0;
  };

  SchemaManager.prototype.saveSchema = function(name, callback) {
    return this.getSchema(name, (function(_this) {
      return function(e, schema) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        if (!schema) {
          return typeof callback === "function" ? callback("Schema '" + name + " was not found", null) : void 0;
        }
        return schema.save(callback);
      };
    })(this));
  };

  SchemaManager.prototype.renameSchema = function(name, newName, callback) {
    return this.getSchema(name, (function(_this) {
      return function(e, schema) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        (_this.__schemas[newName] = schema).name = newName;
        delete _this.__schemas[name];
        return schema.rename(newName, callback);
      };
    })(this));
  };

  SchemaManager.prototype.saveAll = function(callback) {
    var eOut;
    eOut = [];
    _.each(this.__schemas, function(v, k) {
      return v.save((function(_this) {
        return function(e) {
          if (e) {
            return eOut.push(e);
          }
        };
      })(this));
    });
    return typeof callback === "function" ? callback((eOut.length ? eOut : null), null) : void 0;
  };

  SchemaManager.prototype.destroySchema = function(name, callback) {
    return this.getSchema(name, (function(_this) {
      return function(e, schema) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return schema.destroy(function(e, s) {
          if (_this.__schemas[name] != null) {
            delete _this.__schemas[name];
          }
          return callback(e, s);
        });
      };
    })(this));
  };

  SchemaManager.prototype.toJSON = function(readable) {
    return JSON.parse(this.toString(readable));
  };

  SchemaManager.prototype.toString = function(readable) {
    var s;
    s = {};
    _.each(_.keys(this.__schemas), (function(_this) {
      return function(key) {
        var schema;
        return s[key] = (schema = _this.__schemas[key].__data).toClientSchema ? schema.toClientSchema() : schema;
      };
    })(this));
    return JSON.stringify({
      __meta__: this.__meta,
      __schemas__: s
    }, RenderableSchema.replacer, readable ? 2 : void 0);
  };

  return SchemaManager;

})(RikkiTikkiAPI.base_classes.Singleton);

module.exports = SchemaManager;
