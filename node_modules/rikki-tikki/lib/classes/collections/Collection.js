// Generated by CoffeeScript 1.9.0
var Collection, RikkiTikkiAPI, Util, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Collection = (function(_super) {
  __extends(Collection, _super);

  function Collection(_at_name) {
    this.name = _at_name;
    this.getCollection = __bind(this.getCollection, this);
    if (!this.name) {
      throw "collection name must be defined";
    }
    Object.freeze(this);
    this;
  }

  Collection.prototype.getCollection = function(callback) {
    var _db;
    if ((_db = RikkiTikkiAPI.getConnection()) != null) {
      return _db.getMongoDB().collection(this.name, (function(_this) {
        return function(e, collection) {
          return typeof callback === "function" ? callback(e, collection) : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback('Database is not connected', null) : void 0;
    }
  };

  Collection.prototype.drop = function(callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.drop(callback);
      };
    })(this));
  };

  Collection.prototype.indexes = function(callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.indexes(callback);
      };
    })(this));
  };

  Collection.prototype.createIndex = function(name, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.createIndex(name, opts, callback);
      };
    })(this));
  };

  Collection.prototype.ensureIndex = function(name, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.ensureIndex(name, opts, callback);
      };
    })(this));
  };

  Collection.prototype.dropIndex = function(name, callback) {
    if (name === '_id') {
      throw "can not drop index on _id field";
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.dropIndex(name, callback);
      };
    })(this));
  };

  Collection.prototype.dropAllIndexes = function(callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.dropIndexes(callback);
      };
    })(this));
  };

  Collection.prototype.indexExists = function(indexNames, callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.indexExists(indexNames, callback);
      };
    })(this));
  };

  Collection.prototype.indexInformation = function(opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.indexInformation(opts, callback);
      };
    })(this));
  };

  Collection.prototype._sanitize = function(params) {
    return params;
  };

  Collection.prototype.find = function(params, opts, callback) {
    if (!params) {
      return typeof callback === "function" ? callback('argument `params` required', null) : void 0;
    }
    if (typeof params !== 'object') {
      return typeof callback === "function" ? callback('argument `params` expected type `object` type was #{typeof params}', null) : void 0;
    }
    if (typeof opts === 'function') {
      callback = arguments[1];
      opts = {};
    }
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.find(_this._sanitize(params), {}, function(e, res) {
          return res.toArray(callback);
        });
      };
    })(this));
  };

  Collection.prototype.findOne = function(params, opts, callback) {
    if (!params) {
      return typeof callback === "function" ? callback('argument `params` required', null) : void 0;
    }
    if (typeof params !== 'object') {
      return typeof callback === "function" ? callback('argument `params` expected type `object` type was #{typeof params}', null) : void 0;
    }
    if (typeof opts === 'function') {
      callback = arguments[1];
      opts = {};
    }
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.findOne(_this._sanitize(params), opts, callback);
      };
    })(this));
  };

  Collection.prototype.insert = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.insert(params, opts, callback);
      };
    })(this));
  };

  Collection.prototype.save = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.save(params, opts, callback);
      };
    })(this));
  };

  Collection.prototype.update = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.update(params, opts, callback);
      };
    })(this));
  };

  Collection.prototype.upsert = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.upsert(params, opts, callback);
      };
    })(this));
  };

  Collection.prototype.show = function(callback) {
    return this.find({}, {}, callback);
  };

  Collection.prototype.rename = function(name, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.rename(name, opts, callback);
      };
    })(this));
  };

  Collection.prototype.remove = function(query, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.remove(query, opts, callback);
      };
    })(this));
  };

  Collection.prototype.destroy = function(id, callback) {
    return this.remove({
      _id: id
    }, null, callback);
  };

  Collection.prototype.getTree = function(callback) {
    var compare, tree, types;
    types = {};
    tree = {};
    compare = function(a, b) {
      if (a[1] < b[1]) {
        return 1;
      }
      if (a[1] > b[1]) {
        return -1;
      }
      return 0;
    };
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.find({}, {}, function(e, res) {
          if (e != null) {
            return typeof callback === "function" ? callback(e) : void 0;
          }
          return res.toArray(function(e, arr) {
            var branch, field, key, record, tPair, type, value, _i, _len;
            for (_i = 0, _len = arr.length; _i < _len; _i++) {
              record = arr[_i];
              branch = (new RikkiTikkiAPI.Document(record)).serialize();
              for (key in branch) {
                value = branch[key];
                if (types[key] == null) {
                  types[key] = {};
                }
                types[key][value] = types[key][value] != null ? types[key][value] + 1 : 1;
              }
            }
            for (field in types) {
              type = types[field];
              tPair = _.pairs(type);
              if (tPair.length > 1) {
                tPair.sort(compare);
                type = (tPair[0][1] / tPair[1][1]) * 100 > 400 ? tPair[0][0] : 'Mixed';
              } else {
                type = tPair[0][0];
              }
              tree[field] = type;
            }
            return typeof callback === "function" ? callback(null, tree) : void 0;
          });
        });
      };
    })(this));
  };

  return Collection;

})(Object);

Collection.create = function(name, opts, callback) {
  var _db;
  if ((_db = RikkiTikkiAPI.getConnection()) != null) {
    return _db.getMongoDB().createCollection(name, opts, (function(_this) {
      return function(e, collection) {
        if (e) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        if (collection != null) {
          return callback(null, new Collection(name));
        }
      };
    })(this));
  } else {
    return typeof callback === "function" ? callback('Database is not connected', null) : void 0;
  }
};

module.exports = Collection;
