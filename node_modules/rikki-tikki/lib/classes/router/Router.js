// Generated by CoffeeScript 1.9.0
var ClientRenderer, RikkiTikkiAPI, Router, Routes, RoutingParams, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

Routes = require('./routes');

RoutingParams = require('./RoutingParams');

ClientRenderer = require('../client/ClientRenderer');

Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    var client;
    if (!(this.__adapter = RikkiTikkiAPI.getAdapter())) {
      throw "Routing Adapter not defined.";
    }
    this.__api_path = RikkiTikkiAPI.getAPIPath();
    client = new ClientRenderer;
    setTimeout(((function(_this) {
      return function() {
        return _this.__client = client.toSource();
      };
    })(this)), 50);
    this.__routes = new Routes;
  }

  Router.prototype.getAdapter = function() {
    return this.__adapter;
  };

  Router.prototype.intializeRoutes = function() {
    var collections, operation, _i, _len, _ref, _results;
    this.__adapter.addRoute(this.__api_path + "/__schema__", 'get', (function(_this) {
      return function(req, res) {
        return _this.__adapter.responseHandler(res, {
          status: 200,
          content: RikkiTikkiAPI.getSchemaManager().toJSON(RikkiTikkiAPI.Util.Env.isDevelopment())
        });
      };
    })(this));
    this.__adapter.addRoute(this.__api_path + "/client(\.js)?", 'get', (function(_this) {
      return function(req, res) {
        return _this.__adapter.responseHandler(res, {
          status: 200,
          content: _this.__client
        }, {
          'Content-Type': 'text/javascript'
        });
      };
    })(this));
    RikkiTikkiAPI.DEBUG && logger.log('debug', name + ":");
    _ref = ['index', 'show', 'create', 'update', 'destroy'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      operation = _ref[_i];
      collections = RikkiTikkiAPI.Util.Env.isDevelopment() ? [':collection'] : RikkiTikkiAPI.getSchemaManager().listSchemas();
      _results.push(_.each(collections, (function(_this) {
        return function(collection) {
          var path, route;
          switch (operation) {
            case 'show':
              path = _this.__api_path + "/" + collection + "/:id";
              break;
            case 'update':
              path = _this.__api_path + "/" + collection + "/:id";
              break;
            case 'create':
              path = _this.__api_path + "/" + collection;
              break;
            case 'destroy':
              path = _this.__api_path + "/" + collection + "/:id";
              break;
            case 'index':
              path = _this.__api_path + "/" + collection;
              break;
            default:
              throw new Error("unrecognized REST operation type: '" + operation + "'");
          }
          _this.addRoute(route = new RoutingParams(path, operation));
          return RikkiTikkiAPI.DEBUG && logger.log('debug', (route.method.toUpperCase()) + " " + route.path + " -> " + route.operation);
        };
      })(this)));
    }
    return _results;
  };

  Router.prototype.addRoute = function(params) {
    var handler;
    if (params == null) {
      params = {};
    }
    if (!RikkiTikkiAPI.Util.Object.isOfType(params, RoutingParams)) {
      params = new RoutingParams(params.path, params.operation);
    }
    if ((handler = this.__routes.createRoute(params.method, params.path, params.operation)) != null) {
      return this.__adapter.addRoute(params.path, params.method, handler);
    }
  };

  return Router;

})(Object);

module.exports = Router;
