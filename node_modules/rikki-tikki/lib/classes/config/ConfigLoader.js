// Generated by CoffeeScript 1.9.0
var ConfigLoader, RikkiTikkiAPI, fs, path,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports;

ConfigLoader = (function(_super) {
  __extends(ConfigLoader, _super);

  function ConfigLoader(_at___options) {
    this.__options = _at___options;
    ConfigLoader.__super__.constructor.call(this);
  }

  ConfigLoader.prototype.load = function(callback) {
    this.__path = path.normalize("" + (this.__options.get('config_path')) + path.sep + (this.__options.get('config_filename')));
    if (fs.existsSync(this.__path)) {
      return ConfigLoader.__super__.load.call(this, (function(_this) {
        return function(e, _at___data) {
          _this.__data = _at___data;
          return callback != null ? callback.apply(_this, arguments) : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback(new Error("Could not find config file at '" + this.__path + "'")) : void 0;
    }
  };

  ConfigLoader.prototype.getEnvironment = function(env) {
    var _ref;
    return ((_ref = this.__data) != null ? _ref[env] : void 0) || null;
  };

  return ConfigLoader;

})(RikkiTikkiAPI.base_classes.AbstractLoader);

module.exports = ConfigLoader;
