// Generated by CoffeeScript 1.9.0
var DSN, EventEmitter, MongooseConnection, RikkiTikkiAPI, mongoose,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

mongoose = require('mongoose');

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

DSN = RikkiTikkiAPI.DSN;

EventEmitter = require('events').EventEmitter;

MongooseConnection = (function(_super) {
  __extends(MongooseConnection, _super);

  function MongooseConnection(args) {
    var client;
    if (!(this.__conn = RikkiTikkiAPI.getConnection())) {
      client = mongoose.connection;
      client.on('error', (function(_this) {
        return function(e) {
          return _this.emit('error', e.message);
        };
      })(this));
      client.on('open', (function(_this) {
        return function(conn) {
          return _this.emit('open', conn);
        };
      })(this));
      if (args != null) {
        this.connect(args);
      }
    }
  }

  MongooseConnection.prototype.handleClose = function(evt) {
    return this.emit('close', evt);
  };

  MongooseConnection.prototype.connect = function(args) {
    return this.__attemptConnection(this.__dsn = new DSN(args));
  };

  MongooseConnection.prototype.__attemptConnection = function(string) {
    var e;
    try {
      this.__conn = mongoose.connect("" + string);
    } catch (_error) {
      e = _error;
      return this.emit(e);
    }
    return this.emit('connected', this.__conn);
  };

  MongooseConnection.prototype.getConnection = function() {
    return this.__conn.connections[0];
  };

  MongooseConnection.prototype.getMongoDB = function() {
    return this.getConnection().db;
  };

  MongooseConnection.prototype.getDatabaseName = function() {
    return this.getMongoDB().databaseName;
  };

  MongooseConnection.prototype.getCollectionNames = function(callback) {
    return this.getMongoDB().collectionNames((function(_this) {
      return function(e, res) {
        return typeof callback === "function" ? callback(e, res) : void 0;
      };
    })(this));
  };

  MongooseConnection.prototype.isConnected = function() {
    return this.__conn != null;
  };

  MongooseConnection.prototype.close = function(callback) {
    if (this.isConnected()) {
      return this.__conn.disconnect((function(_this) {
        return function(e) {
          _this.__conn = null;
          return typeof callback === "function" ? callback(e) : void 0;
        };
      })(this));
    }
  };

  return MongooseConnection;

})(EventEmitter);

MongooseConnection.types = mongoose.types;

module.exports = MongooseConnection;
