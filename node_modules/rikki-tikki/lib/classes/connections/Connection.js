// Generated by CoffeeScript 1.9.0
var Connection, Connector, EventEmitter, RikkiTikkiAPI, Util,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

EventEmitter = require('events').EventEmitter;

Connector = null;

Connection = (function(_super) {
  __extends(Connection, _super);

  function Connection(args, _at_opts) {
    this.opts = _at_opts != null ? _at_opts : {};
    Connector = require(Util.getCapabilities().mongooseLoaded() && !this.opts.forceNative ? './MongooseConnection' : './NativeConnection');
    this.getTypes = (function(_this) {
      return function() {
        return Connector.types;
      };
    })(this);
    this.__conn = new Connector(args, this.opts);
    this.__conn.once('open', (function(_this) {
      return function(conn) {
        var _base;
        _this.emit('open', _this);
        return typeof (_base = _this.opts).open === "function" ? _base.open(_this) : void 0;
      };
    })(this));
    this.__conn.once('close', (function(_this) {
      return function(evt) {
        var _base;
        _this.handleClose(evt);
        return typeof (_base = _this.opts).close === "function" ? _base.close(evt) : void 0;
      };
    })(this));
    this.__conn.on('error', (function(_this) {
      return function(e) {
        var _base;
        _this.emit('error', "" + e);
        return typeof (_base = _this.opts).error === "function" ? _base.error(evt) : void 0;
      };
    })(this));
    if (args != null) {
      this.connect(args);
    }
    this;
  }

  Connection.prototype.handleClose = function(evt) {
    this.__conn = null;
    return this.emit('close');
  };

  Connection.prototype.connect = function(args) {
    return this.__conn.connect(args);
  };

  Connection.prototype.getConnection = function() {
    return this.__conn.getConnection();
  };

  Connection.prototype.getMongoDB = function() {
    return this.__conn.getMongoDB();
  };

  Connection.prototype.getDatabaseName = function() {
    return this.__conn.getDatabaseName();
  };

  Connection.prototype.isConnected = function() {
    return this.__conn.isConnected();
  };

  Connection.prototype.getCollectionNames = function(callback) {
    return this.__conn.getCollectionNames((function(_this) {
      return function(e, names) {
        return typeof callback === "function" ? callback(e, names) : void 0;
      };
    })(this));
  };

  Connection.prototype.close = function(callback) {
    return this.__conn.close((function(_this) {
      return function(e, s) {
        return typeof callback === "function" ? callback(e, s) : void 0;
      };
    })(this));
  };

  return Connection;

})(RikkiTikkiAPI.base_classes.SingletonEmitter);

module.exports = Connection;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;
