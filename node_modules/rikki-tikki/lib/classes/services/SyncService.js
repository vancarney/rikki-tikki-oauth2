// Generated by CoffeeScript 1.9.0
var RikkiTikkiAPI, SchemaTreeManager, SyncOperation, SyncService, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports;

Util = RikkiTikkiAPI.Util;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

SyncOperation = require('./SyncOperation');

SchemaTreeManager = require('../schema_tree/SchemaTreeManager');

SyncService = (function(_super) {
  __extends(SyncService, _super);

  SyncService.prototype.__opCache = [];

  SyncService.prototype.getOpIndex = function(name, type) {
    return (_.map(this.__opCache, function(v, k) {
      return v.name + ":" + v.operation;
    })).indexOf(name + ":" + type);
  };

  function SyncService() {
    var _collectionInit, _collections, _schemaInit, _schemas, _syncInit;
    this.collectionManager = RikkiTikkiAPI.getCollectionManager();
    this.schemaManager = RikkiTikkiAPI.getSchemaManager();
    this.schemaTreeManager = SchemaTreeManager.getInstance();
    _schemas = [];
    _collections = [];
    _schemaInit = false;
    _collectionInit = false;
    _syncInit = (function(_this) {
      return function() {
        _.each(_schemas, function(v, k) {
          return _this.collectionManager.getCollection(v.name, function(e, col) {
            if (col == null) {
              _this.__opCache.push(new SyncOperation(v.name, 'added'));
              return _this.collectionManager.createCollection(v.name);
            }
          });
        });
        return _.each(_collections, function(v, k) {
          return _this.schemaManager.getSchema(v.name, function(e, col) {
            if (col == null) {
              _this.__opCache.push(new SyncOperation(v.name, 'added'));
              return _this.schemaManager.createSchema(v.name);
            }
          });
        });
      };
    })(this);
    RikkiTikkiAPI.getSchemaMonitor().on('init', (function(_this) {
      return function(data) {
        _schemas = arguments['0'].added;
        if ((_schemaInit = true) && _collectionInit) {
          return _syncInit();
        }
      };
    })(this)).on('changed', (function(_this) {
      return function(data) {
        return setTimeout((function() {
          return _.each(_.keys(data), function(operation) {
            return _.each(data[operation], function(schema) {
              _this["schema" + (Util.String.capitalize(operation))](schema.name);
              return _this.__opCache.push(new SyncOperation(schema.name, operation));
            });
          });
        }), 500);
      };
    })(this));
    RikkiTikkiAPI.getCollectionMonitor().on('init', (function(_this) {
      return function(data) {
        _collections = arguments['0'].added;
        if ((_collectionInit = true) && _schemaInit) {
          return _syncInit();
        }
      };
    })(this)).on('changed', (function(_this) {
      return function(data) {
        return setTimeout((function() {
          return _.each(_.keys(data), function(operation) {
            return _.each(data[operation], function(collection) {
              _this["collection" + (Util.String.capitalize(operation))](collection.name);
              return _this.__opCache.push(new SyncOperation(collection.name, operation));
            });
          });
        }), 500);
      };
    })(this));
  }

  SyncService.prototype.collectionAdded = function(name) {
    var idx;
    if (!(0 <= (idx = this.getOpIndex(name, 'added')))) {
      return this.collectionManager.getCollection(name, (function(_this) {
        return function(e, col) {
          if (e != null) {
            return console.log(e);
          }
          return col.getTree(function(e, tree) {
            return _this.schemaTreeManager.createTree(name, tree, function(e) {
              if (e != null) {
                return console.log("could not create SchemaTree file for '" + name + "'\n\t" + e);
              }
              return _this.schemaManager.createSchema(name, function(e) {
                if (e != null) {
                  return console.log("could not create Schema JS file for '" + name + "'\n\t" + e);
                }
              });
            });
          });
        };
      })(this));
    } else {
      return this.__opCache.splice(idx, 1);
    }
  };

  SyncService.prototype.collectionRemoved = function(name) {
    var idx;
    if (!(0 <= (idx = this.getOpIndex(name, 'removed')))) {
      this.schemaTreeManager.destroyTree(name, (function(_this) {
        return function(e, done) {
          if (e != null) {
            return console.log("could not destroy SchemaTree file for '" + name + "'\n\t" + e);
          }
        };
      })(this));
      return this.schemaManager.destroySchema(name, (function(_this) {
        return function(e) {
          if (e != null) {
            return console.log("could not destroy Schema JS file for '" + name + "'\n\t" + e);
          }
        };
      })(this));
    } else {
      return this.__opCache.splice(idx, 1);
    }
  };

  SyncService.prototype.collectionReplaced = function(name) {
    return console.log("replaced collection: " + name);
  };

  SyncService.prototype.schemaAdded = function(name, tree) {
    var idx;
    if (tree == null) {
      tree = {};
    }
    if (!(0 <= (idx = this.getOpIndex(name, 'added')))) {
      return this.schemaTreeManager.createTree(name, tree, (function(_this) {
        return function(e) {
          if (e != null) {
            return console.log("could not create SchemaTree file for '" + name + "'\n\t" + e);
          }
          return _this.collectionManager.createCollection(name, function(e) {
            if (e != null) {
              return console.log("could not create Collection '" + name + "'\n\t" + e);
            }
          });
        };
      })(this));
    } else {
      return this.__opCache.splice(idx, 1);
    }
  };

  SyncService.prototype.schemaRemoved = function(name) {
    var idx;
    if (!(0 <= (idx = this.getOpIndex(name, 'removed')))) {
      return this.schemaTreeManager.destroyTree(name, (function(_this) {
        return function(e) {
          if (e != null) {
            console.log("could not destroy SchemaTree file for '" + name + "'\n\t" + e);
          }
          return _this.collectionManager.dropCollection(name, function(e) {
            if (e != null) {
              return console.log("could not destroy Collection '" + name + "'\n\t" + e);
            }
          });
        };
      })(this));
    } else {
      return this.__opCache.splice(idx, 1);
    }
  };

  SyncService.prototype.schemaReplaced = function(name) {
    return this.schemaManager.reloadSchema(name);
  };

  return SyncService;

})(RikkiTikkiAPI.base_classes.Singleton);

module.exports = SyncService;
