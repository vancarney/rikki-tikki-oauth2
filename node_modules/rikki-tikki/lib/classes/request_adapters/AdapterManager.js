// Generated by CoffeeScript 1.9.0
var AdapterManager, RikkiTikkiAPI,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI || module.parent.exports;

AdapterManager = (function(_super) {
  __extends(AdapterManager, _super);

  function AdapterManager() {
    var adapters;
    adapters = {};
    this.registerAdapter = (function(_this) {
      return function(name, adapterClass) {
        return adapters[name] = {
          adapter: adapterClass
        };
      };
    })(this);
    this.listAdapters = (function(_this) {
      return function() {
        return Object.keys(adapters);
      };
    })(this);
    this.getAdapter = (function(_this) {
      return function(name) {
        if (adapters[name] != null) {
          return adapters[name].adapter;
        } else {
          return null;
        }
      };
    })(this);
    this.createAdapter = (function(_this) {
      return function(name, options) {
        var adapter;
        if (typeof name === 'string') {
          if ((adapter = _this.getAdapter(name)) == null) {
            throw "Adapter '" + name + "' was not defined";
          }
          return new adapter(options);
        } else if (RikkiTikki.Util.Object.isOfType(name, RikkiTikkiAPI.base_classes.AbstractAdapter)) {
          return new name(options);
        }
      };
    })(this);
    this.unregisterAdapter = (function(_this) {
      return function(name) {
        return delete adapters[name];
      };
    })(this);
  }

  return AdapterManager;

})(RikkiTikkiAPI.base_classes.Singleton);

module.exports = AdapterManager;
