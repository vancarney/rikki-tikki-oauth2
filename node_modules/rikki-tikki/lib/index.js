// Generated by CoffeeScript 1.9.0
var AdapterManager, ClientLoader, CollectionManager, CollectionMonitor, EventEmitter, Model, ModuleManager, RikkiTikkiAPI, SchemaManager, SchemaMonitor, SchemaTree, SchemaTreeManager, SyncService, cnf, e, fs, path, _, _collections, _connections, _router, _types,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('underscore')._;

EventEmitter = require('events').EventEmitter;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = (function(_super) {
  __extends(RikkiTikkiAPI, _super);

  RikkiTikkiAPI.prototype.__adapter = null;

  RikkiTikkiAPI.prototype.__detected_adapter = null;

  function RikkiTikkiAPI(__options, callback) {
    var adapter, useAdapter;
    if (__options == null) {
      __options = new RikkiTikkiAPI.APIOptions;
    }
    if (!RikkiTikkiAPI.Util.Object.isOfType(__options, RikkiTikkiAPI.APIOptions)) {
      __options = new RikkiTikkiAPI.APIOptions(__options);
    }
    if (!(adapter = __options.get('adapter'))) {
      return typeof callback === "function" ? callback('required param `adapter` was undefined', false) : void 0;
    }
    useAdapter = (function(_this) {
      return function(adapter, options) {
        var router;
        if (adapter) {
          if (typeof adapter === 'string') {
            if (0 <= RikkiTikkiAPI.Adapters.listAdapters().indexOf(adapter)) {
              _this.__adapter = new (RikkiTikkiAPI.Adapters.getAdapter(adapter))(options);
            } else {
              throw "Routing Adapter '" + adapter + "' was not registered. Use RikkiTikkiAPI.Adapters.registerAdapter(name, class)";
            }
          } else {
            _this.__adapter = adapter;
          }
          RikkiTikkiAPI.getAdapter = function() {
            return _this.__adapter;
          };
          if (RikkiTikkiAPI.getConnection() != null) {
            if ((_this.__adapter != null) && ((router = new RikkiTikkiAPI.Router) != null)) {
              router.intializeRoutes();
              return _this.emit('ready');
            }
          } else {
            return _this.once('open', function() {
              if ((_this.__adapter != null) && ((router = new RikkiTikkiAPI.Router) != null)) {
                router.intializeRoutes();
                return _this.emit('ready');
              }
            });
          }
        } else {
          throw 'param \'adapter\' is required';
          return process.exit(1);
        }
      };
    })(this);
    (this.__config = new RikkiTikkiAPI.ConfigLoader(__options)).load((function(_this) {
      return function(e, data) {
        return _this.connect((e == null ? _this.__config.getEnvironment(RikkiTikkiAPI.Util.Env.getEnvironment()) : {
          host: 'localhost'
        }), {
          open: function() {
            if ((adapter = __options.get('adapter')) != null) {
              useAdapter(adapter);
            }
            if (RikkiTikkiAPI.Util.Env.isDevelopment()) {
              SyncService.getInstance();
            }
            return _this.emit('open', null, _this.__conn);
          },
          error: function(e) {
            return _this.emit('error', e, null);
          },
          close: function() {
            return _this.emit('close');
          }
        });
      };
    })(this));
    if (typeof callback === "function") {
      callback(null, true);
    }
  }

  RikkiTikkiAPI.prototype.connect = function(dsn, opts) {
    this.__conn = RikkiTikkiAPI.getConnection();
    this.__conn.once('open', (function(_this) {
      return function(evt) {
        return opts != null ? typeof opts.open === "function" ? opts.open(evt) : void 0 : void 0;
      };
    })(this));
    this.__conn.once('close', (function(_this) {
      return function(evt) {
        return opts != null ? typeof opts.close === "function" ? opts.close(evt) : void 0 : void 0;
      };
    })(this));
    this.__conn.once('error', (function(_this) {
      return function(e) {
        return opts != null ? typeof opts.error === "function" ? opts.error(e) : void 0 : void 0;
      };
    })(this));
    return this.__conn.connect(dsn);
  };

  RikkiTikkiAPI.prototype.disconnect = function(callback) {
    return this.__conn.close((function(_this) {
      return function(e, s) {
        delete SchemaManager.__instance;
        delete SchemaTreeManager.__instance;
        delete CollectionManager.__instance;
        delete SyncService.__instance;
        delete _this.__conn;
        return typeof callback === "function" ? callback(e, s) : void 0;
      };
    })(this));
  };

  return RikkiTikkiAPI;

})(EventEmitter);

module.exports = RikkiTikkiAPI;

RikkiTikkiAPI.DEBUG = false;

RikkiTikkiAPI.ADAPTER = null;

RikkiTikkiAPI.DESTRUCTIVE = false;

RikkiTikkiAPI.API_BASEPATH = '/api';

RikkiTikkiAPI.API_VERSION = '1';

RikkiTikkiAPI.API_NAMESPACE = '';

RikkiTikkiAPI.AUTH_CONFIG_PATH = "" + (process.cwd()) + path.sep + "configs" + path.sep + "auth";

RikkiTikkiAPI.CONFIG_PATH = "" + (process.cwd()) + path.sep + "configs";

RikkiTikkiAPI.CONFIG_FILENAME = 'db.json';

RikkiTikkiAPI.SCHEMA_PATH = "" + (process.cwd()) + path.sep + "schemas";

RikkiTikkiAPI.SCHEMA_API_REQUIRE_PATH = "rikki-tikki";

RikkiTikkiAPI.SCHEMA_TREES_FILE = 'schema.json';

RikkiTikkiAPI.WRAP_SCHEMA_EXPORTS = true;

RikkiTikkiAPI.CLIENT_HOST = "0.0.0.0";

RikkiTikkiAPI.CLIENT_PORT = 80;

RikkiTikkiAPI.CLIENT_API_VERSION = RikkiTikkiAPI.API_VERSION;

RikkiTikkiAPI.CLIENT_APP_ID = null;

RikkiTikkiAPI.CLIENT_APP_ID_PARAM_NAME = null;

RikkiTikkiAPI.CLIENT_API_NAMESPACE = RikkiTikkiAPI.API_NAMESPACE;

RikkiTikkiAPI.CLIENT_REST_KEY = null;

RikkiTikkiAPI.CLIENT_REST_KEY_PARAM_NAME = null;

RikkiTikkiAPI.CLIENT_PROTOCOL = 'HTTP';

RikkiTikkiAPI.createAdapter = function(name, opts) {
  var inst;
  return (inst = AdapterManager.getInstance()).createAdapter.apply(inst, arguments);
};

RikkiTikkiAPI.getAdapterByName = function(name) {
  var inst;
  return (inst = AdapterManager.getInstance()).getAdapter.apply(inst, arguments);
};

RikkiTikkiAPI.listAdapters = function() {
  return AdapterManager.getInstance().listAdapters();
};

RikkiTikkiAPI.registerAdapter = function(name, adapterClass) {
  var inst;
  return (inst = AdapterManager.getInstance()).registerAdapter.apply(inst, arguments);
};

RikkiTikkiAPI.unregisterAdapter = function(name) {
  var inst;
  return (inst = AdapterManager.getInstance()).registerAdapter.apply(inst, arguments);
};

RikkiTikkiAPI.getAdapter = function() {
  return null;
};

RikkiTikkiAPI.getConnection = function() {
  return RikkiTikkiAPI.Connection.getInstance();
};

RikkiTikkiAPI.isConnected = function() {
  return RikkiTikkiAPI.getConnection().isConnected();
};

RikkiTikkiAPI.getAPIPath = function() {
  return RikkiTikkiAPI.API_BASEPATH + "/" + RikkiTikkiAPI.API_VERSION;
};

RikkiTikkiAPI.addRoute = (function(_this) {
  return function(path, operation, handler) {
    var _adapter;
    if ((_adapter = RikkiTikkiAPI.getAdapter()) != null) {
      return _adapter.addRoute(path, operation, handler);
    } else {
      throw new Error('Adapter is not defined');
    }
  };
})(this);

RikkiTikkiAPI.getSchemaManager = function() {
  return SchemaManager.getInstance();
};

RikkiTikkiAPI.getSchemaTreeManager = function() {
  return SchemaTreeManager.getInstance();
};

RikkiTikkiAPI.getSchemaMonitor = function() {
  return SchemaMonitor.getInstance();
};

RikkiTikkiAPI.registerModule = function(name, clazz) {
  var _ref;
  return (_ref = ModuleManager.getInstance()) != null ? _ref.registerModule(name, clazz) : void 0;
};

RikkiTikkiAPI.retrieveModule = function(name) {
  var _ref;
  return (_ref = ModuleManager.getInstance()) != null ? _ref.retrieveModule(name) : void 0;
};

RikkiTikkiAPI.removeModule = function(name) {
  var _ref;
  return (_ref = ModuleManager.getInstance()) != null ? _ref.removeModule(name) : void 0;
};

RikkiTikkiAPI.getCollectionManager = function() {
  return CollectionManager.getInstance();
};

RikkiTikkiAPI.getCollectionMonitor = function() {
  return CollectionMonitor.getInstance();
};

RikkiTikkiAPI.getSchemaTree = function(name) {
  var tree;
  if ((tree = SchemaTreeManager.getInstance().__trees[name])) {
    return tree;
  } else {
    return {};
  }
};

RikkiTikkiAPI.getOptions = function() {
  return new RikkiTikkiAPI.APIOptions;
};

RikkiTikkiAPI.listCollections = function() {
  return this.getCollectionMonitor().getNames();
};

RikkiTikkiAPI.extend = _.extend;

RikkiTikkiAPI.model = function(name, schema) {
  var model, type, _this;
  if (schema == null) {
    schema = {};
  }
  if (!name) {
    throw "name is required for model";
  }
  if ((type = typeof name) !== 'string') {
    throw "name expected to be String type was '" + type + "'";
  }
  _this = this;
  model = function model(data, opts) { if (!(this instanceof RikkiTikkiAPI.model)) return _.extend(_this, new RikkiTikkiAPI.Document( data, opts )); };
  model.modelName = name;
  model.schema = schema;
  model.toClientSchema = function() {
    return new RikkiTikkiAPI.ClientSchema(this.modelName, this.schema);
  };
  model.toAPISchema = function() {
    return new RikkiTikkiAPI.APISchema(this.modelName, this.schema);
  };
  return model;
};

try {
  require('rikki-tikki-client');
} catch (_error) {
  e = _error;
  throw new Error("rikki-tikki-client was not found. Try 'npm install rikki-tikki-client'");
  process.exit(1);
}

RikkiTikkiAPI.Util = require('./classes/utils');

RikkiTikkiAPI.base_classes = require('./classes/base_class');

RikkiTikkiAPI.APIOptions = require('./classes/config/APIOptions');

_types = require('./classes/types');

RikkiTikkiAPI.OperationTypes = _types.OperationTypes;

RikkiTikkiAPI.DSN = require('mongo-dsn');

ClientLoader = require('./classes/client/ClientLoader');

_connections = require('./classes/connections');

RikkiTikkiAPI.Connection = _connections.Connection;

_router = require('./classes/router');

RikkiTikkiAPI.Router = _router.Router;

RikkiTikkiAPI.RoutingParams = _router.RoutingParams;

RikkiTikkiAPI.ConfigLoader = require('./classes/config/ConfigLoader');

RikkiTikkiAPI.Schema = require('./classes/schema/Schema');

RikkiTikkiAPI.APISchema = require('./classes/schema/APISchema');

RikkiTikkiAPI.ClientSchema = require('./classes/schema/ClientSchema');

AdapterManager = require('./classes/request_adapters/AdapterManager');

ModuleManager = require('./classes/modules/ModuleManager');

SchemaManager = require('./classes/schema/SchemaManager');

SchemaMonitor = require('./classes/schema/SchemaMonitor');

SchemaTree = require('./classes/schema_tree/SchemaTree');

SchemaTreeManager = require('./classes/schema_tree/SchemaTreeManager');

SyncService = require('./classes/services/SyncService');

_collections = require('./classes/collections');

CollectionManager = _collections.CollectionManager;

CollectionMonitor = _collections.CollectionMonitor;

RikkiTikkiAPI.Collection = _collections.Collection;

RikkiTikkiAPI.Document = _collections.Document;

Model = _collections.Model;

cnf = new (require('./classes/config/AppConfig'))();

RikkiTikkiAPI.Util.File.ensureDirExists(cnf.get('data_path'));

RikkiTikkiAPI.Util.File.ensureDirExists(cnf.get('trees_path'));
